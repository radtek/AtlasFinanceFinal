<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LumiSoft.Net</name>
    </assembly>
    <members>
        <member name="T:LumiSoft.Net.AsyncOP">
            <summary>
            This is base class for asynchronous operation.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AsyncOP.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AsyncOP.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AsyncOP.IsCompleted">
            <summary>
            Gets if asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AsyncOP.IsCompletedSynchronously">
            <summary>
            Gets if operation completed synchronously.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.AsyncOP_State">
            <summary>
            Specifies asynchronous operation state.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.AsyncOP_State.WaitingForStart">
            <summary>
            Operation waits for start.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.AsyncOP_State.Active">
            <summary>
            Operation processing is in progress.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.AsyncOP_State.Completed">
            <summary>
            Operations is completed.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.AsyncOP_State.Disposed">
            <summary>
            Operation is disposed.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.AUTH.AUTH_Gmail_OAuth1_3leg">
            <summary>
            This class implements Google Gmail OAUTH version 1.0.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_Gmail_OAuth1_3leg.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_Gmail_OAuth1_3leg.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="consumerKey">OAuth consumer key.</param>
            <param name="consumerSecret">OAuth consumer secret.</param>
            <exception cref="T:System.ArgumentNullException">Is riased when <b>consumerKey</b> or <b>consumerSecret</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is riased when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_Gmail_OAuth1_3leg.GetRequestToken">
            <summary>
            Gets Gmail request Token.
            </summary>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is called in invalid state.</exception>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_Gmail_OAuth1_3leg.GetRequestToken(System.String)">
            <summary>
            Gets Gmail request Token.
            </summary>
            <param name="callback">OAuth callback Url.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>callback</b> is null reference.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is called in invalid state.</exception>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_Gmail_OAuth1_3leg.GetAuthorizationUrl">
            <summary>
            Gets Gmail authorization Url.
            </summary>
            <returns>Returns Gmail authorization Url.</returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_Gmail_OAuth1_3leg.GetAccessToken(System.String)">
            <summary>
            Gets Gmail access token.
            </summary>
            <param name="verificationCode">Google provided verfification code on authorization Url.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>verificationCode</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is called in invalid state.</exception>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_Gmail_OAuth1_3leg.GetXOAuthStringForSmtp">
            <summary>
            Gets Gmail XOAUTH authentication string.
            </summary>
            <returns>Returns Gmail XOAUTH authentication string.</returns>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is called in invalid state.</exception>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_Gmail_OAuth1_3leg.GetXOAuthStringForSmtp(System.String)">
            <summary>
            Gets Gmail XOAUTH authentication string.
            </summary>
            <param name="email">Gmail email address.</param>
            <returns>Returns Gmail XOAUTH authentication string.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>email</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is called in invalid state.</exception>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_Gmail_OAuth1_3leg.GetXOAuthStringForImap">
            <summary>
            Gets Gmail XOAUTH authentication string.
            </summary>
            <returns>Returns Gmail XOAUTH authentication string.</returns>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is called in invalid state.</exception>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_Gmail_OAuth1_3leg.GetXOAuthStringForImap(System.String)">
            <summary>
            Gets Gmail XOAUTH authentication string.
            </summary>
            <param name="email">Gmail email address.</param>
            <returns>Returns Gmail XOAUTH authentication string.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>email</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is called in invalid state.</exception>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_Gmail_OAuth1_3leg.GetUserEmail">
            <summary>
            Gets user Gmail email address. 
            </summary>
            <returns>Returns user Gmail email address.</returns>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is called in invalid state.</exception>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_Gmail_OAuth1_3leg.GenerateTimeStamp">
            <summary>
            Creates the timestamp for the signature.        
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_Gmail_OAuth1_3leg.GenerateNonce">
            <summary>
            Creates a nonce for the signature.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_Gmail_OAuth1_3leg.Email">
            <summary>
            Gets user Gmail email address. Returns null if no GetUserEmail method ever called.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.AUTH.AUTH_SASL_Client">
            <summary>
            This base class for client SASL authentication mechanisms. Defined in RFC 4422.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_Client.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_Client.Continue(System.Byte[])">
            <summary>
            Continues authentication process.
            </summary>
            <param name="serverResponse">Server sent SASL response.</param>
            <returns>Returns challange request what must be sent to server or null if authentication has completed.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>serverResponse</b> is null reference.</exception>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_Client.IsCompleted">
            <summary>
            Gets if the authentication exchange has completed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_Client.Name">
            <summary>
            Gets IANA-registered SASL authentication mechanism name.
            </summary>
            <remarks>The registered list is available from: http://www.iana.org/assignments/sasl-mechanisms .</remarks>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_Client.UserName">
            <summary>
            Gets user login name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_Client.SupportsInitialResponse">
            <summary>
            Gets if the authentication method supports SASL client "inital response".
            </summary>
        </member>
        <member name="T:LumiSoft.Net.AUTH.AUTH_SASL_Client_CramMd5">
            <summary>
            Implements "CRAM-MD5" authenticaiton.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_Client_CramMd5.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="userName">User login name.</param>
            <param name="password">User password.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>userName</b> or <b>password</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_Client_CramMd5.Continue(System.Byte[])">
            <summary>
            Continues authentication process.
            </summary>
            <param name="serverResponse">Server sent SASL response.</param>
            <returns>Returns challange request what must be sent to server or null if authentication has completed.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>serverResponse</b> is null reference.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is called when authentication is completed.</exception>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_Client_CramMd5.IsCompleted">
            <summary>
            Gets if the authentication exchange has completed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_Client_CramMd5.Name">
            <summary>
            Returns always "LOGIN".
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_Client_CramMd5.UserName">
            <summary>
            Gets user login name.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.AUTH.AUTH_SASL_Client_DigestMd5">
            <summary>
            Implements "DIGEST-MD5" authenticaiton.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_Client_DigestMd5.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="protocol">Protocol name. For example: SMTP.</param>
            <param name="server">Remote server name or IP address.</param>
            <param name="userName">User login name.</param>
            <param name="password">User password.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>protocol</b>,<b>server</b>,<b>userName</b> or <b>password</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_Client_DigestMd5.Continue(System.Byte[])">
            <summary>
            Continues authentication process.
            </summary>
            <param name="serverResponse">Server sent SASL response.</param>
            <returns>Returns challange request what must be sent to server or null if authentication has completed.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>serverResponse</b> is null reference.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is called when authentication is completed.</exception>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_Client_DigestMd5.IsCompleted">
            <summary>
            Gets if the authentication exchange has completed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_Client_DigestMd5.Name">
            <summary>
            Returns always "DIGEST-MD5".
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_Client_DigestMd5.UserName">
            <summary>
            Gets user login name.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.AUTH.AUTH_SASL_Client_Login">
            <summary>
            Implements "LOGIN" authenticaiton.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_Client_Login.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="userName">User login name.</param>
            <param name="password">User password.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>userName</b> or <b>password</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_Client_Login.Continue(System.Byte[])">
            <summary>
            Continues authentication process.
            </summary>
            <param name="serverResponse">Server sent SASL response.</param>
            <returns>Returns challange request what must be sent to server or null if authentication has completed.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>serverResponse</b> is null reference.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is called when authentication is completed.</exception>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_Client_Login.IsCompleted">
            <summary>
            Gets if the authentication exchange has completed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_Client_Login.Name">
            <summary>
            Returns always "LOGIN".
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_Client_Login.UserName">
            <summary>
            Gets user login name.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.AUTH.AUTH_SASL_Client_Ntlm">
            <summary>
            Implements NTLM authentication.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_Client_Ntlm.#ctor(System.String,System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="domain">Domain name.</param>
            <param name="userName">User login name.</param>
            <param name="password">Password.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>domain</b>,<b>userName</b> or <b>passowrd</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_Client_Ntlm.Continue(System.Byte[])">
            <summary>
            Continues authentication process.
            </summary>
            <param name="serverResponse">Server sent SASL response.</param>
            <returns>Returns challange request what must be sent to server or null if authentication has completed.</returns>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is called when authentication is completed.</exception>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_Client_Ntlm.IsCompleted">
            <summary>
            Gets if the authentication exchange has completed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_Client_Ntlm.Name">
            <summary>
            Returns always "NTLM".
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_Client_Ntlm.UserName">
            <summary>
            Gets user login name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_Client_Ntlm.SupportsInitialResponse">
            <summary>
            Gets if the authentication method supports SASL client "inital response".
            </summary>
        </member>
        <member name="T:LumiSoft.Net.AUTH.AUTH_SASL_Client_Ntlm.MessageType1">
            <summary>
            This class represents NTLM type 1 message.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_Client_Ntlm.MessageType1.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="domain">Domain name.</param>
            <param name="host">Host name.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>domain</b> or <b>host</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_Client_Ntlm.MessageType1.ToByte">
            <summary>
            Converts this to binary NTML type 1 message.
            </summary>
            <returns>Returns this as binary NTML type 1 message.</returns>
        </member>
        <member name="T:LumiSoft.Net.AUTH.AUTH_SASL_Client_Ntlm.MessageType2">
            <summary>
            This class represents NTLM type 2 message.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_Client_Ntlm.MessageType2.#ctor(System.Byte[])">
            <summary>
            Default constructor.
            </summary>
            <param name="nonce">NTLM 8 byte nonce.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>nonce</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_Client_Ntlm.MessageType2.Parse(System.Byte[])">
            <summary>
            Parses NTLM type 2 message.
            </summary>
            <param name="data">NTLM type 2 message.</param>
            <returns>Returns parsed NTLM type 2 message.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>data</b> is null reference.</exception>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_Client_Ntlm.MessageType2.Nonce">
            <summary>
            Gets nonce.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.AUTH.AUTH_SASL_Client_Ntlm.MessageType3">
            <summary>
            This class represents NTLM type 3 message.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_Client_Ntlm.MessageType3.#ctor(System.String,System.String,System.String,System.Byte[],System.Byte[])">
            <summary>
            Default constructor.
            </summary>
            <param name="domain">Domain name.</param>
            <param name="user">User name.</param>
            <param name="host">Host name.</param>
            <param name="lm">Lan Manager response.</param>
            <param name="nt">NT response.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>domain</b>,<b>user</b>,<b>host</b>,<b>lm</b> or <b>nt</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_Client_Ntlm.MessageType3.ToByte">
            <summary>
            Converts this to binary NTML type 3 message.
            </summary>
            <returns>Returns this as binary NTML type 3 message.</returns>
        </member>
        <member name="T:LumiSoft.Net.AUTH.AUTH_SASL_Client_Ntlm.NTLM_Utils">
            <summary>
            This class provides NTLM related utility methods.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_Client_Ntlm.NTLM_Utils.CalculateLM(System.Byte[],System.String)">
            <summary>
            Calculates NTLM NT response.
            </summary>
            <param name="nonce">Server nonce.</param>
            <param name="password">Password.</param>
            <returns>Returns NTLM NT response.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>nonce</b> or <b>password</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_Client_Ntlm.NTLM_Utils.CalculateNT(System.Byte[],System.String)">
            <summary>
            Calculates NTLM LM response.
            </summary>
            <param name="nonce">Server nonce.</param>
            <param name="password">Password.</param>
            <returns>Returns NTLM LM response.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>nonce</b> or <b>password</b> is null reference.</exception>
        </member>
        <member name="T:LumiSoft.Net.AUTH.AUTH_SASL_Client_Plain">
            <summary>
            Implements "PLAIN" authenticaiton.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_Client_Plain.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="userName">User login name.</param>
            <param name="password">User password.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>userName</b> or <b>password</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_Client_Plain.Continue(System.Byte[])">
            <summary>
            Continues authentication process.
            </summary>
            <param name="serverResponse">Server sent SASL response.</param>
            <returns>Returns challange request what must be sent to server or null if authentication has completed.</returns>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is called when authentication is completed.</exception>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_Client_Plain.IsCompleted">
            <summary>
            Gets if the authentication exchange has completed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_Client_Plain.Name">
            <summary>
            Returns always "PLAIN".
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_Client_Plain.UserName">
            <summary>
            Gets user login name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_Client_Plain.SupportsInitialResponse">
            <summary>
            Gets if the authentication method supports SASL client "inital response".
            </summary>
        </member>
        <member name="T:LumiSoft.Net.AUTH.AUTH_SASL_Client_XOAuth">
            <summary>
            This class implements <b>XOAUTH</b> authentication.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_Client_XOAuth.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="userName">User login name.</param>
            <param name="authString">OAUTH authentication string. For example you can use <see cref="M:LumiSoft.Net.AUTH.AUTH_Gmail_OAuth1_3leg.GetXOAuthStringForImap"/> to get valid string.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>userName</b> or <b>authString</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is riased when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_Client_XOAuth.Continue(System.Byte[])">
            <summary>
            Continues authentication process.
            </summary>
            <param name="serverResponse">Server sent SASL response.</param>
            <returns>Returns challange request what must be sent to server or null if authentication has completed.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>serverResponse</b> is null reference.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is called when authentication is completed.</exception>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_Client_XOAuth.IsCompleted">
            <summary>
            Gets if the authentication exchange has completed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_Client_XOAuth.Name">
            <summary>
            Returns always "LOGIN".
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_Client_XOAuth.UserName">
            <summary>
            Gets user login name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_Client_XOAuth.SupportsInitialResponse">
            <summary>
            Returns always true, because XOAUTH authentication method supports SASL client "inital response".
            </summary>
        </member>
        <member name="T:LumiSoft.Net.AUTH.AUTH_SASL_Client_XOAuth2">
            <summary>
            This class implements <b>XOAUTH2</b> authentication.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_Client_XOAuth2.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="userName">User login name.</param>
            <param name="accessToken">The access Token.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>userName</b> or <b>accessToken</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_Client_XOAuth2.Continue(System.Byte[])">
            <summary>
            Continues authentication process.
            </summary>
            <param name="serverResponse">Server sent SASL response.</param>
            <returns>Returns challange request what must be sent to server or null if authentication has completed.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>serverResponse</b> is null reference.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is called when authentication is completed.</exception>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_Client_XOAuth2.IsCompleted">
            <summary>
            Gets if the authentication exchange has completed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_Client_XOAuth2.Name">
            <summary>
            Returns always "LOGIN".
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_Client_XOAuth2.UserName">
            <summary>
            Gets user login name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_Client_XOAuth2.SupportsInitialResponse">
            <summary>
            Returns always true, because XOAUTH2 authentication method supports SASL client "inital response".
            </summary>
        </member>
        <member name="T:LumiSoft.Net.ByteBuilder">
            <summary>
            Implements byte data builder.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.ByteBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.ByteBuilder.Append(System.String)">
            <summary>
            Appends specified string value to the buffer. String is encoded with <see cref="P:LumiSoft.Net.ByteBuilder.Charset"/>.
            </summary>
            <param name="value">String value.</param>
            <exception cref="T:System.ArgumentNullException">Is aised when <b>value</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.ByteBuilder.Append(System.Text.Encoding,System.String)">
            <summary>
            Appends specified string value to the buffer.
            </summary>
            <param name="charset">Character encoding.</param>
            <param name="value">String value.</param>
            <exception cref="T:System.ArgumentNullException">Is aised when <b>charset</b> or <b>value</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.ByteBuilder.Append(System.Byte[])">
            <summary>
            Appends specified byte[] value to the buffer.
            </summary>
            <param name="value">Byte value.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.ByteBuilder.Append(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Appends specified byte[] value to the buffer.
            </summary>
            <param name="value">Byte value.</param>
            <param name="offset">Offset in the value.</param>
            <param name="count">Number of bytes to append.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.ByteBuilder.ToByte">
            <summary>
            Returns this as byte[] data.
            </summary>
            <returns>Returns this as byte[] data.</returns>
        </member>
        <member name="P:LumiSoft.Net.ByteBuilder.Count">
            <summary>
            Gets number of bytes in byte builder buffer.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.ByteBuilder.Charset">
            <summary>
            Gets or sets default charset encoding used for string related operations.
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised when null reference value is set.</exception>
        </member>
        <member name="T:LumiSoft.Net.ErrorEventHandler">
            <summary>
            Represent the method what will handle Error event.
            </summary>
            <param name="sender">Delegate caller.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="T:LumiSoft.Net.Error_EventArgs">
            <summary>
            Provides data for the SysError event for servers.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Error_EventArgs.#ctor(System.Exception,System.Diagnostics.StackTrace)">
            <summary>
            Default constructor.
            </summary>
            <param name="x"></param>
            <param name="stackTrace"></param>
        </member>
        <member name="P:LumiSoft.Net.Error_EventArgs.Exception">
            <summary>
            Occured error's exception.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Error_EventArgs.StackTrace">
            <summary>
            Occured error's stacktrace.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Error_EventArgs.Text">
            <summary>
            Gets comment text.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.FTP.FTP_t_ReplyLine">
            <summary>
            This class represent s FTP server reply-line.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.FTP_t_ReplyLine.#ctor(System.Int32,System.String,System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="replyCode">FTP server reply code.</param>
            <param name="text">FTP server reply text.</param>
            <param name="isLastLine">Specifies if this line is last line in response.</param>
        </member>
        <member name="M:LumiSoft.Net.FTP.FTP_t_ReplyLine.Parse(System.String)">
            <summary>
            Parses FTP reply-line from 
            </summary>
            <param name="line">FTP server reply-line.</param>
            <returns>Returns parsed FTP server reply-line.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>line</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when reply-line parsing fails.</exception>
        </member>
        <member name="M:LumiSoft.Net.FTP.FTP_t_ReplyLine.ToString">
            <summary>
            Returns this as FTP server <b>reply-line</b>.
            </summary>
            <returns>Returns this as FTP server <b>reply-line</b>.</returns>
        </member>
        <member name="P:LumiSoft.Net.FTP.FTP_t_ReplyLine.ReplyCode">
            <summary>
            Gets SMTP server reply code.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.FTP_t_ReplyLine.Text">
            <summary>
            Gets SMTP server relpy text.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.FTP_t_ReplyLine.IsLastLine">
            <summary>
            Gets if this is last reply line.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.FTP.Server.FTP_e_Appe">
            <summary>
            This class provides data for <see cref="E:LumiSoft.Net.FTP.Server.FTP_Session.Appe"/> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_e_Appe.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="file">File name with option path.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>file</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.FTP_e_Appe.Error">
            <summary>
            Gets or sets error response.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.FTP_e_Appe.FileName">
            <summary>
            Gets file name with optional path.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.FTP_e_Appe.FileStream">
            <summary>
            Gets or sets file stream.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.FTP.Server.FTP_e_Authenticate">
            <summary>
            This class provides data for <see cref="E:LumiSoft.Net.FTP.Server.FTP_Session.Authenticate"/> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_e_Authenticate.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="user">User name.</param>
            <param name="password">Password.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>user</b> or <b>password</b> is null reference.</exception>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.FTP_e_Authenticate.IsAuthenticated">
            <summary>
            Gets or sets if session is authenticated.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.FTP_e_Authenticate.User">
            <summary>
            Gets user name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.FTP_e_Authenticate.Password">
            <summary>
            Gets password.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.FTP.Server.FTP_e_Cdup">
            <summary>
            This class provides data for <see cref="E:LumiSoft.Net.FTP.Server.FTP_Session.Cdup"/> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_e_Cdup.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.FTP_e_Cdup.Response">
            <summary>
            Gets or sets FTP server response.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.FTP.Server.FTP_e_Cwd">
            <summary>
            This class provides data for <see cref="E:LumiSoft.Net.FTP.Server.FTP_Session.Cwd"/> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_e_Cwd.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="dirName">Directory name with optional path.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>dirName</b> is null reference.</exception>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.FTP_e_Cwd.Response">
            <summary>
            Gets or sets FTP server response.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.FTP_e_Cwd.DirName">
            <summary>
            Gets directory name with optional path.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.FTP.Server.FTP_e_Dele">
            <summary>
            This class provides data for <see cref="E:LumiSoft.Net.FTP.Server.FTP_Session.Dele"/> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_e_Dele.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="fileName">File name with optional path.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>fileName</b> is null reference.</exception>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.FTP_e_Dele.Response">
            <summary>
            Gets or sets FTP server response.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.FTP_e_Dele.FileName">
            <summary>
            Gets file name with optional path.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.FTP.Server.FTP_e_GetDirListing">
            <summary>
            This class provides data for <see cref="E:LumiSoft.Net.FTP.Server.FTP_Session.GetDirListing"/> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_e_GetDirListing.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="path">Path.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>path</b> is null reference.</exception>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.FTP_e_GetDirListing.Error">
            <summary>
            Gets or sets error response.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.FTP_e_GetDirListing.Path">
            <summary>
            Gets path which list items to get.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.FTP_e_GetDirListing.Items">
            <summary>
            Gets directory list items.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.FTP.Server.FTP_e_GetFile">
            <summary>
            This class provides data for <see cref="E:LumiSoft.Net.FTP.Server.FTP_Session.GetFile"/> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_e_GetFile.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="file">File name with option path.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>file</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.FTP_e_GetFile.Error">
            <summary>
            Gets or sets error response.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.FTP_e_GetFile.FileName">
            <summary>
            Gets file name with optional path.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.FTP_e_GetFile.FileStream">
            <summary>
            Gets or sets file stream.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.FTP.Server.FTP_e_GetFileSize">
            <summary>
            This class provides data for <see cref="E:LumiSoft.Net.FTP.Server.FTP_Session.GetFileSize"/> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_e_GetFileSize.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="fileName">File name with optional path.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>fileName</b> is null reference.</exception>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.FTP_e_GetFileSize.Error">
            <summary>
            Gets or sets error response.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.FTP_e_GetFileSize.FileName">
            <summary>
            Gets file name with optional path.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.FTP_e_GetFileSize.FileSize">
            <summary>
            Gets or sets file size in bytes.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.FTP.Server.FTP_e_Mkd">
            <summary>
            This class provides data for <see cref="E:LumiSoft.Net.FTP.Server.FTP_Session.Mkd"/> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_e_Mkd.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="dirName">Directory name with optional path.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>dirName</b> is null reference.</exception>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.FTP_e_Mkd.Response">
            <summary>
            Gets or sets FTP server response.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.FTP_e_Mkd.DirName">
            <summary>
            Gets directory name with optional path.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.FTP.Server.FTP_e_Rmd">
            <summary>
            This class provides data for <see cref="E:LumiSoft.Net.FTP.Server.FTP_Session.Rmd"/> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_e_Rmd.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="dirName">Directory name with optional path.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>dirName</b> is null reference.</exception>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.FTP_e_Rmd.Response">
            <summary>
            Gets or sets FTP server response.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.FTP_e_Rmd.DirName">
            <summary>
            Gets directory name with optional path.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.FTP.Server.FTP_e_Rnto">
            <summary>
            This class provides data for <see cref="E:LumiSoft.Net.FTP.Server.FTP_Session.Rnto"/> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_e_Rnto.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="sourcePath">Source file or directory path.</param>
            <param name="targetPath">Target file or directory path.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>sourcePath</b> or <b>targetPath</b> is null reference.</exception>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.FTP_e_Rnto.Response">
            <summary>
            Gets or sets FTP server response.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.FTP_e_Rnto.SourcePath">
            <summary>
            Gets source path.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.FTP_e_Rnto.TargetPath">
            <summary>
            Gets target path.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.FTP.Server.FTP_e_Started">
            <summary>
            This class provides data for <b cref="E:LumiSoft.Net.FTP.Server.FTP_Session.Started">FTP_Session.Started</b> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_e_Started.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="response">POP3 server response.</param>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.FTP_e_Started.Response">
            <summary>
            Gets or sets FTP server response.
            </summary>
            <remarks>Response also MUST contain response code(220 / 500). For example: "500 Session rejected."</remarks>
        </member>
        <member name="T:LumiSoft.Net.FTP.Server.FTP_e_Stor">
            <summary>
            This class provides data for <see cref="E:LumiSoft.Net.FTP.Server.FTP_Session.Stor"/> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_e_Stor.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="file">File name with option path.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>file</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.FTP_e_Stor.Error">
            <summary>
            Gets or sets error response.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.FTP_e_Stor.FileName">
            <summary>
            Gets file name with optional path.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.FTP_e_Stor.FileStream">
            <summary>
            Gets or sets file stream.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.HostEntry">
            <summary>
            This class represent DNS host entry.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.HostEntry.#ctor(System.String,System.Net.IPAddress[],System.String[])">
            <summary>
            Default constructor.
            </summary>
            <param name="hostName">DNS host name.</param>
            <param name="ipAddresses">Host IP addresses.</param>
            <param name="aliases">Host aliases(CNAME).</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>hostName</b> or <b>ipAddresses</b> is null reference.</exception>
        </member>
        <member name="P:LumiSoft.Net.HostEntry.HostName">
            <summary>
            Gets DNS host name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.HostEntry.Addresses">
            <summary>
            Gets list of IP addresses that are associated with a host.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.HostEntry.Aliases">
            <summary>
            Gets list of aliases(CNAME) that are associated with a host.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IAsyncOP">
            <summary>
            Represents asynchronous operation.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IAsyncOP.State">
            <summary>
            Gets asynchronous operation state.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IAsyncOP.Error">
            <summary>
            Gets error happened during operation. Returns null if no error.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.UDP.UDP_DataReceiver">
            <summary>
            This class implements high performance UDP data receiver.
            </summary>
            <remarks>NOTE: High performance server applications should create multiple instances of this class per one socket.</remarks>
        </member>
        <member name="M:LumiSoft.Net.UDP.UDP_DataReceiver.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Default constructor.
            </summary>
            <param name="socket">UDP socket.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>socket</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.UDP.UDP_DataReceiver.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.UDP.UDP_DataReceiver.Start">
            <summary>
            Starts receiving data.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this calss is disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.UDP.UDP_DataReceiver.IOCompletionReceive">
            <summary>
            Receives synchornously(if packet(s) available now) or starts waiting UDP packet asynchronously if no packets at moment.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.UDP.UDP_DataReceiver.AsyncSocketReceive(System.IAsyncResult)">
            <summary>
            Is called BeginReceiveFrom has completed.
            </summary>
            <param name="ar">The result of the asynchronous operation.</param>
        </member>
        <member name="M:LumiSoft.Net.UDP.UDP_DataReceiver.OnPacketReceived(System.Byte[],System.Int32,System.Net.IPEndPoint)">
            <summary>
            Raises <b>PacketReceived</b> event.
            </summary>
            <param name="buffer">Data buffer.</param>
            <param name="count">Number of bytes stored in <b>buffer</b></param>
            <param name="remoteEP">Remote IP end point from where data was received.</param>
        </member>
        <member name="M:LumiSoft.Net.UDP.UDP_DataReceiver.OnError(System.Exception)">
            <summary>
            Raises <b>Error</b> event.
            </summary>
            <param name="x">Exception happened.</param>
        </member>
        <member name="E:LumiSoft.Net.UDP.UDP_DataReceiver.PacketReceived">
            <summary>
            Is raised when when new UDP packet is available.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.UDP.UDP_DataReceiver.Error">
            <summary>
            Is raised when unhandled error happens.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.UDP.UDP_e_PacketReceived">
            <summary>
            This class provides data for the <see cref="E:LumiSoft.Net.UDP.UDP_DataReceiver.PacketReceived"/> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.UDP.UDP_e_PacketReceived.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.UDP.UDP_e_PacketReceived.Reuse(System.Net.Sockets.Socket,System.Byte[],System.Int32,System.Net.IPEndPoint)">
            <summary>
            Reuses this class.
            </summary>
            <param name="socket">Socket which received data.</param>
            <param name="buffer">Data buffer.</param>
            <param name="count">Number of bytes stored in <b>buffer</b></param>
            <param name="remoteEP">Remote IP end point from where data was received.</param>
        </member>
        <member name="P:LumiSoft.Net.UDP.UDP_e_PacketReceived.Socket">
            <summary>
            Gets socket which received data.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.UDP.UDP_e_PacketReceived.Buffer">
            <summary>
            Gets data buffer.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.UDP.UDP_e_PacketReceived.Count">
            <summary>
            Gets number of bytes stored to <b>Buffer</b>.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.UDP.UDP_e_PacketReceived.RemoteEP">
            <summary>
            Gets remote host from where data was received.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.AUTH.AUTH_SASL_DigestMD5_Challenge">
            <summary>
            This class represents SASL DIGEST-MD5 authentication <b>digest-challenge</b>. Defined in RFC 2831.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_DigestMD5_Challenge.#ctor(System.String[],System.String,System.String[],System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="realm">Realm value.</param>
            <param name="nonce">Nonce value.</param>
            <param name="qopOptions">Quality of protections supported. Normally this is "auth".</param>
            <param name="stale">Stale value.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>realm</b>,<b>nonce</b> or <b>qopOptions</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_DigestMD5_Challenge.#ctor">
            <summary>
            Internal parse constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_DigestMD5_Challenge.Parse(System.String)">
            <summary>
            Parses DIGEST-MD5 challenge from challenge-string.
            </summary>
            <param name="challenge">Challenge string.</param>
            <returns>Returns DIGEST-MD5 challenge.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>challenge</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when challenge parsing + validation fails.</exception>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_DigestMD5_Challenge.ToChallenge">
            <summary>
            Returns DIGEST-MD5 "digest-challenge" string.
            </summary>
            <returns>Returns DIGEST-MD5 "digest-challenge" string.</returns>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_DigestMD5_Challenge.Realm">
            <summary>
            Gets realm value. For more info see RFC 2831.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_DigestMD5_Challenge.Nonce">
            <summary>
            Gets nonce value. For more info see RFC 2831.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_DigestMD5_Challenge.QopOptions">
            <summary>
            Gets qop-options value. For more info see RFC 2831.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_DigestMD5_Challenge.Stale">
            <summary>
            Gets if stale value. For more info see RFC 2831.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_DigestMD5_Challenge.Maxbuf">
            <summary>
            Gets maxbuf value. For more info see RFC 2831.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_DigestMD5_Challenge.Charset">
            <summary>
            Gets charset value. For more info see RFC 2831.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_DigestMD5_Challenge.Algorithm">
            <summary>
            Gets algorithm value. For more info see RFC 2831.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_DigestMD5_Challenge.CipherOpts">
            <summary>
            Gets cipher-opts value. For more info see RFC 2831.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.AUTH.AUTH_SASL_DigestMD5_Response">
            <summary>
            This class represents SASL DIGEST-MD5 authentication <b>digest-response</b>. Defined in RFC 2831.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_DigestMD5_Response.#ctor(LumiSoft.Net.AUTH.AUTH_SASL_DigestMD5_Challenge,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="challenge">Client challenge.</param>
            <param name="realm">Realm value. This must be one value of the challenge Realm.</param>
            <param name="userName">User name.</param>
            <param name="password">User password.</param>
            <param name="cnonce">Client nonce value.</param>
            <param name="nonceCount">Nonce count. One-based client authentication attempt number. Normally this value is 1.</param>
            <param name="qop">Indicates what "quality of protection" the client accepted. This must be one value of the challenge QopOptions.</param>
            <param name="digestUri">Digest URI.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>challenge</b>,<b>realm</b>,<b>password</b>,<b>nonce</b>,<b>qop</b> or <b>digestUri</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_DigestMD5_Response.#ctor">
            <summary>
            Internal parse constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_DigestMD5_Response.Parse(System.String)">
            <summary>
            Parses DIGEST-MD5 response from response-string.
            </summary>
            <param name="digestResponse">Response string.</param>
            <returns>Returns DIGEST-MD5 response.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>digestResponse</b> isnull reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when response parsing + validation fails.</exception>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_DigestMD5_Response.Authenticate(System.String,System.String)">
            <summary>
            Authenticates user.
            </summary>
            <param name="userName">User name.</param>
            <param name="password">Password.</param>
            <returns>Returns true if user authenticated, otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>userName</b> or <b>password</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_DigestMD5_Response.ToResponse">
            <summary>
            Creates digest response for challenge.
            </summary>
            <returns>Returns digest response.</returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_DigestMD5_Response.ToRspauthResponse(System.String,System.String)">
            <summary>
            Creates <b>response-auth</b> response for client.
            </summary>
            <returns>Returns <b>response-auth</b> response.</returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_DigestMD5_Response.CalculateResponse(System.String,System.String)">
            <summary>
            Calculates digest response.
            </summary>
            <param name="userName">User name.</param>
            <param name="password">Password.</param>
            <returns>Returns digest response.</returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_DigestMD5_Response.a1(System.String,System.String)">
            <summary>
            Calculates A1 value.
            </summary>
            <param name="userName">User name.</param>
            <param name="password">Password.</param>
            <returns>Returns A1 value.</returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_DigestMD5_Response.a2">
            <summary>
            Calculates A2 value.
            </summary>
            <returns>Returns A2 value.</returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_DigestMD5_Response.h(System.Byte[])">
            <summary>
            Computes MD5 hash.
            </summary>
            <param name="value">Value to process.</param>
            <returns>Return MD5 hash.</returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_DigestMD5_Response.hex(System.Byte[])">
            <summary>
            Converts value to hex string.
            </summary>
            <param name="value">Value to convert.</param>
            <returns>Returns hex string.</returns>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_DigestMD5_Response.UserName">
            <summary>
            Gets user name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_DigestMD5_Response.Realm">
            <summary>
            Gets realm(domain) name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_DigestMD5_Response.Nonce">
            <summary>
            Gets nonce value.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_DigestMD5_Response.Cnonce">
            <summary>
            Gets cnonce value.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_DigestMD5_Response.NonceCount">
            <summary>
            Gets nonce count.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_DigestMD5_Response.Qop">
            <summary>
            Gets "quality of protection" value.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_DigestMD5_Response.DigestUri">
            <summary>
            Gets digest URI value.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_DigestMD5_Response.Response">
            <summary>
            Gets response value.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_DigestMD5_Response.Charset">
            <summary>
            Gets charset value.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_DigestMD5_Response.Cipher">
            <summary>
            Gets cipher value.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_DigestMD5_Response.Authzid">
            <summary>
            Gets authorization ID.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.AUTH.AUTH_e_Authenticate">
            <summary>
            This class provides data for server userName/password authentications.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_e_Authenticate.#ctor(System.String,System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="authorizationID">Authorization ID.</param>
            <param name="userName">User name.</param>
            <param name="password">Password.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>userName</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the argumnets has invalid value.</exception>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_e_Authenticate.IsAuthenticated">
            <summary>
            Gets or sets if specified user is authenticated.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_e_Authenticate.AuthorizationID">
            <summary>
            Gets authorization ID.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_e_Authenticate.UserName">
            <summary>
            Gets user name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_e_Authenticate.Password">
            <summary>
            Gets password.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.AUTH.AUTH_e_UserInfo">
            <summary>
            This class provides data for server authentication mechanisms <b>GetUserInfo</b> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_e_UserInfo.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="userName">User name.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>userName</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_e_UserInfo.UserExists">
            <summary>
            Gets or sets if specified user exists.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_e_UserInfo.UserName">
            <summary>
            Gets user name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_e_UserInfo.Password">
            <summary>
            Gets or sets user password.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.AUTH.Auth_HttpDigest">
            <summary>
            Implements http digest access authentication. Defined in RFC 2617.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="digestResponse">Server/Client returned digest response.</param>
            <param name="requestMethod">Request method.</param>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Client constructor. This is used to build valid Authorization response to server.
            </summary>
            <param name="userName">User name.</param>
            <param name="password">Password.</param>
            <param name="cnonce">Client nonce value.</param>
            <param name="uri">Request URI.</param>
            <param name="digestResponse">Server authenticate resposne.</param>
            <param name="requestMethod">Request method.</param>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest.#ctor(System.String,System.String,System.String)">
            <summary>
            Server constructor. This is used to build valid Authenticate response to client.
            </summary>
            <param name="realm">Realm(domain).</param>
            <param name="nonce">Nonce value.</param>
            <param name="opaque">Opaque value.</param>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest.Authenticate(System.String,System.String)">
            <summary>
            Authenticates specified user and password using this class parameters.
            </summary>
            <param name="userName">User name.</param>
            <param name="password">Password.</param>
            <returns>Returns true if authenticated, otherwise false.</returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest.Parse(System.String)">
            <summary>
            Parses authetication info from client digest response.
            </summary>
            <param name="digestResponse">Client returned digest response.</param>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest.CalculateRspAuth(System.String,System.String)">
            <summary>
            Calculates 'rspauth' value.
            </summary>
            <param name="userName">User name.</param>
            <param name="password">Password.</param>
            <returns>Returns 'rspauth' value.</returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest.CalculateResponse(System.String,System.String)">
            <summary>
            Calculates response value.
            </summary>
            <param name="userName">User name.</param>
            <param name="password">User password.</param>
            <returns>Returns calculated rsponse value.</returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest.ToString">
            <summary>
            Converts this to valid digest string.
            </summary>
            <returns>Returns digest string.</returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest.ToChallange">
            <summary>
            Creates 'Challange' data using this class info. 
            </summary>
            <returns>Returns Challange data.</returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest.ToChallange(System.Boolean)">
            <summary>
            Creates 'Challange' data using this class info. 
            </summary>
            <param name="addAuthMethod">Specifies if 'digest ' authe method string constant is added.</param>
            <returns>Returns Challange data.</returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest.ToAuthorization">
            <summary>
            Creates 'Authorization' data using this class info.
            </summary>
            <returns>Return Authorization data.</returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest.ToAuthorization(System.Boolean)">
            <summary>
            Creates 'Authorization' data using this class info.
            </summary>
            <param name="addAuthMethod">Specifies if 'digest ' authe method string constant is added.</param>
            <returns>Return Authorization data.</returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest.CreateNonce">
            <summary>
            Creates valid nonce value.
            </summary>
            <returns>Returns nonce value.</returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest.CreateOpaque">
            <summary>
            Creates valid opaque value.
            </summary>
            <returns>Renturn opaque value.</returns>
        </member>
        <member name="P:LumiSoft.Net.AUTH.Auth_HttpDigest.RequestMethod">
            <summary>
            Gets or sets request method.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.Auth_HttpDigest.Realm">
            <summary>
            Gets or sets a string to be displayed to users so they know which username and password 
            to use. This string should contain at least the name of the host performing the 
            authentication and might additionally indicate the collection of users who might have access.
            An example might be "registered_users@gotham.news.com".
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.Auth_HttpDigest.Nonce">
            <summary>
            Gets or sets a server-specified unique data string. It is recommended that this 
            string be base64 or hexadecimal data. 
            Suggested value: base64(time-stamp hex(time-stamp ":" ETag ":" private-key)).
            </summary>
            <exception cref="T:System.ArgumentException">Is raised when invalid value is specified.</exception>
        </member>
        <member name="P:LumiSoft.Net.AUTH.Auth_HttpDigest.Opaque">
            <summary>
            Gets or sets string of data, specified by the server, which should be returned by the client unchanged.
            It is recommended that this string be base64 or hexadecimal data.
            </summary>
            <exception cref="T:System.ArgumentException">Is raised when invalid value is specified.</exception>
        </member>
        <member name="P:LumiSoft.Net.AUTH.Auth_HttpDigest.Algorithm">
            <summary>
            Gets or sets algorithm to use to produce the digest and a checksum.
            This is normally MD5 or MD5-sess.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.Auth_HttpDigest.Response">
            <summary>
            Gets a string of 32 hex digits computed by HTTP digest algorithm, 
            which proves that the user knows a password.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.Auth_HttpDigest.UserName">
            <summary>
            Gets or sets user name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.Auth_HttpDigest.Password">
            <summary>
            Gets or sets password.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.Auth_HttpDigest.Uri">
            <summary>
            Gets the URI from Request-URI.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.Auth_HttpDigest.Qop">
            <summary>
            Gets or sets value what indicates "quality of protection" the client has applied to
            the message. If present, its value MUST be one of the alternatives the server indicated
            it supports in the WWW-Authenticate header. This directive is optional in order to preserve 
            backward compatibility.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.Auth_HttpDigest.CNonce">
            <summary>
            Gets or sets Client nonce value. This MUST be specified if a qop directive is sent (see above), and
            MUST NOT be specified if the server did not send a qop directive in the WWW-Authenticate header field.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.Auth_HttpDigest.NonceCount">
            <summary>
            Gets or stets nonce count. This MUST be specified if a qop directive is sent (see above), and
            MUST NOT be specified if the server did not send a qop directive in the WWW-Authenticate 
            header field.  The nc-value is the hexadecimal count of the number of requests.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.AUTH.Auth_HttpDigest_NonceManager">
            <summary>
            HTTP digest authentication nonce manager.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest_NonceManager.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest_NonceManager.Dispose">
            <summary>
            Cleans up nay resource being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest_NonceManager.CreateNonce">
            <summary>
            Creates new nonce and adds it to active nonces collection.
            </summary>
            <returns>Returns new created nonce.</returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest_NonceManager.NonceExists(System.String)">
            <summary>
            Checks if specified nonce exists in active nonces collection.
            </summary>
            <param name="nonce">Nonce to check.</param>
            <returns>Returns true if nonce exists in active nonces collection, otherwise returns false.</returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest_NonceManager.RemoveNonce(System.String)">
            <summary>
            Removes specified nonce from active nonces collection.
            </summary>
            <param name="nonce">Nonce to remove.</param>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest_NonceManager.RemoveExpiredNonces">
            <summary>
            Removes not used nonces what has expired.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.Auth_HttpDigest_NonceManager.ExpireTime">
            <summary>
            Gets or sets nonce expire time in seconds.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.AUTH.Auth_HttpDigest_NonceManager.NonceEntry">
            <summary>
            This class represents nonce entry in active nonces collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest_NonceManager.NonceEntry.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="nonce"></param>
        </member>
        <member name="P:LumiSoft.Net.AUTH.Auth_HttpDigest_NonceManager.NonceEntry.Nonce">
            <summary>
            Gets nonce value.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.Auth_HttpDigest_NonceManager.NonceEntry.CreateTime">
            <summary>
            Gets time when this nonce entry was created.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism">
            <summary>
            This base class for server SASL authentication mechanisms.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism.Reset">
            <summary>
            Resets any authentication state data.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism.Continue(System.Byte[])">
            <summary>
            Continues authentication process.
            </summary>
            <param name="clientResponse">Client sent SASL response.</param>
            <returns>Retunrns challange response what must be sent to client or null if authentication has completed.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>clientRespone</b> is null reference.</exception>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism.IsCompleted">
            <summary>
            Gets if the authentication exchange has completed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism.IsAuthenticated">
            <summary>
            Gets if user has authenticated sucessfully.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism.Name">
            <summary>
            Gets IANA-registered SASL authentication mechanism name.
            </summary>
            <remarks>The registered list is available from: http://www.iana.org/assignments/sasl-mechanisms .</remarks>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism.RequireSSL">
            <summary>
            Gets if specified SASL mechanism is available only to SSL connection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism.UserName">
            <summary>
            Gets user login name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism.Tags">
            <summary>
            Gets user data items collection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="T:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_CramMd5">
            <summary>
            Implements "CRAM-MD5" authenticaiton. Defined in RFC 2195.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_CramMd5.#ctor(System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="requireSSL">Specifies if this mechanism is available to SSL connections only.</param>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_CramMd5.Reset">
            <summary>
            Resets any authentication state data.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_CramMd5.Continue(System.Byte[])">
            <summary>
            Continues authentication process.
            </summary>
            <param name="clientResponse">Client sent SASL response.</param>
            <returns>Retunrns challange response what must be sent to client or null if authentication has completed.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>clientResponse</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_CramMd5.HmacMd5(System.String,System.String)">
            <summary>
            Calculates keyed md5 hash from specifieed text and with specified hash key.
            </summary>
            <param name="hashKey">MD5 key.</param>
            <param name="text">Text to hash.</param>
            <returns>Returns MD5 hash.</returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_CramMd5.OnGetUserInfo(System.String)">
            <summary>
            Raises <b>GetUserInfo</b> event.
            </summary>
            <param name="userName">User name.</param>
            <returns>Returns specified user info.</returns>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_CramMd5.IsCompleted">
            <summary>
            Gets if the authentication exchange has completed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_CramMd5.IsAuthenticated">
            <summary>
            Gets if user has authenticated sucessfully.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_CramMd5.Name">
            <summary>
            Returns always "CRAM-MD5".
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_CramMd5.RequireSSL">
            <summary>
            Gets if specified SASL mechanism is available only to SSL connection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_CramMd5.UserName">
            <summary>
            Gets user login name.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_CramMd5.GetUserInfo">
            <summary>
            Is called when authentication mechanism needs to get user info to complete atuhentication.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_DigestMd5">
            <summary>
            Implements "DIGEST-MD5" authenticaiton. Defined in RFC 2831.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_DigestMd5.#ctor(System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="requireSSL">Specifies if this mechanism is available to SSL connections only.</param>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_DigestMd5.Reset">
            <summary>
            Resets any authentication state data.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_DigestMd5.Continue(System.Byte[])">
            <summary>
            Continues authentication process.
            </summary>
            <param name="clientResponse">Client sent SASL response.</param>
            <returns>Retunrns challange response what must be sent to client or null if authentication has completed.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>clientResponse</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_DigestMd5.OnGetUserInfo(System.String)">
            <summary>
            Raises <b>GetUserInfo</b> event.
            </summary>
            <param name="userName">User name.</param>
            <returns>Returns specified user info.</returns>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_DigestMd5.IsCompleted">
            <summary>
            Gets if the authentication exchange has completed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_DigestMd5.IsAuthenticated">
            <summary>
            Gets if user has authenticated sucessfully.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_DigestMd5.Name">
            <summary>
            Returns always "DIGEST-MD5".
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_DigestMd5.RequireSSL">
            <summary>
            Gets if specified SASL mechanism is available only to SSL connection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_DigestMd5.Realm">
            <summary>
            Gets or sets realm value.
            </summary>
            <remarks>Normally this is host or domain name.</remarks>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_DigestMd5.UserName">
            <summary>
            Gets user login name.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_DigestMd5.GetUserInfo">
            <summary>
            Is called when authentication mechanism needs to get user info to complete atuhentication.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_Login">
            <summary>
            Implements "LOGIN" authenticaiton.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_Login.#ctor(System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="requireSSL">Specifies if this mechanism is available to SSL connections only.</param>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_Login.Reset">
            <summary>
            Resets any authentication state data.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_Login.Continue(System.Byte[])">
            <summary>
            Continues authentication process.
            </summary>
            <param name="clientResponse">Client sent SASL response.</param>
            <returns>Retunrns challange response what must be sent to client or null if authentication has completed.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>clientResponse</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_Login.OnAuthenticate(System.String,System.String,System.String)">
            <summary>
            Raises <b>Authenticate</b> event.
            </summary>
            <param name="authorizationID">Authorization ID.</param>
            <param name="userName">User name.</param>
            <param name="password">Password.</param>
            <returns>Returns authentication result.</returns>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_Login.IsCompleted">
            <summary>
            Gets if the authentication exchange has completed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_Login.IsAuthenticated">
            <summary>
            Gets if user has authenticated sucessfully.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_Login.Name">
            <summary>
            Returns always "LOGIN".
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_Login.RequireSSL">
            <summary>
            Gets if specified SASL mechanism is available only to SSL connection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_Login.UserName">
            <summary>
            Gets user login name.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_Login.Authenticate">
            <summary>
            Is called when authentication mechanism needs to authenticate specified user.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_Plain">
            <summary>
            Implements "PLAIN" authenticaiton. Defined in RFC 4616.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_Plain.#ctor(System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="requireSSL">Specifies if this mechanism is available to SSL connections only.</param>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_Plain.Reset">
            <summary>
            Resets any authentication state data.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_Plain.Continue(System.Byte[])">
            <summary>
            Continues authentication process.
            </summary>
            <param name="clientResponse">Client sent SASL response.</param>
            <returns>Retunrns challange response what must be sent to client or null if authentication has completed.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>clientResponse</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_Plain.OnAuthenticate(System.String,System.String,System.String)">
            <summary>
            Raises <b>Authenticate</b> event.
            </summary>
            <param name="authorizationID">Authorization ID.</param>
            <param name="userName">User name.</param>
            <param name="password">Password.</param>
            <returns>Returns authentication result.</returns>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_Plain.IsCompleted">
            <summary>
            Gets if the authentication exchange has completed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_Plain.IsAuthenticated">
            <summary>
            Gets if user has authenticated sucessfully.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_Plain.Name">
            <summary>
            Returns always "PLAIN".
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_Plain.RequireSSL">
            <summary>
            Gets if specified SASL mechanism is available only to SSL connection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_Plain.UserName">
            <summary>
            Gets user login name.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_Plain.Authenticate">
            <summary>
            Is called when authentication mechanism needs to authenticate specified user.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IO.Base64">
            <summary>
            This class implements base64 encoder/decoder.  Defined in RFC 4648.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.Base64.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.Base64.Encode(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Encodes bytes.
            </summary>
            <param name="buffer">Data buffer.</param>
            <param name="offset">Offset in the buffer.</param>
            <param name="count">Number of bytes available in the buffer.</param>
            <param name="last">Last data block.</param>
            <returns>Returns encoded data.</returns>
        </member>
        <member name="M:LumiSoft.Net.IO.Base64.Decode(System.String,System.Boolean)">
            <summary>
            Decodes specified base64 string.
            </summary>
            <param name="value">Base64 string.</param>
            <param name="ignoreNonBase64Chars">If true all invalid base64 chars ignored. If false, FormatException is raised.</param>
            <returns>Returns decoded data.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
            <exception cref="T:System.FormatException">Is raised when <b>value</b> contains invalid base64 data.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.Base64.Decode(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Decodes specified base64 data.
            </summary>
            <param name="data">Base64 encoded data buffer.</param>
            <param name="offset">Offset in the buffer.</param>
            <param name="count">Number of bytes available in the buffer.</param>
            <param name="ignoreNonBase64Chars">If true all invalid base64 chars ignored. If false, FormatException is raised.</param>
            <returns>Returns decoded data.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>data</b> is null reference.</exception>
            <exception cref="T:System.FormatException">Is raised when <b>value</b> contains invalid base64 data.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.Base64.Decode(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Decodes base64 encoded bytes.
            </summary>
            <param name="encBuffer">Base64 encoded data buffer.</param>
            <param name="encOffset">Offset in the encBuffer.</param>
            <param name="encCount">Number of bytes available in the encBuffer.</param>
            <param name="buffer">Buffer where to decode data.</param>
            <param name="offset">Offset int the buffer.</param>
            <param name="ignoreNonBase64Chars">If true all invalid base64 chars ignored. If false, FormatException is raised.</param>
            <returns>Returns number of bytes decoded.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>encBuffer</b> or <b>encBuffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when any of the arguments has out of valid range.</exception>
            <exception cref="T:System.FormatException">Is raised when <b>encBuffer</b> contains invalid base64 data.</exception>
        </member>
        <member name="T:LumiSoft.Net.IO.FifoBuffer">
            <summary>
            Implements FIFO(first in - first out) buffer.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.FifoBuffer.#ctor(System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="maxSize">Maximum number of bytes can buffer in FIFO.</param>
            <exception cref="T:System.ArgumentException">Is raised when </exception>
        </member>
        <member name="M:LumiSoft.Net.IO.FifoBuffer.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads up to specified count of bytes from the FIFO buffer.
            </summary>
            <param name="buffer">Buffer where to store data.</param>
            <param name="offset">Index in the buffer.</param>
            <param name="count">Maximum number of bytes to read.</param>
            <returns>Returns number of bytes readed. Returns 0 if no data in the buffer.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when any of the arguments has out of allowed range.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.FifoBuffer.Write(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Writes specified number of bytes to the FIFO buffer.
            </summary>
            <param name="buffer">Data buffer.</param>
            <param name="offset">Index in the buffer.</param>
            <param name="count">Number of bytes to wrtite.</param>
            <param name="ignoreBufferFull">If true, disables excption raising when FIFO full.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when any of the arguments has out of allowed range.</exception>
            <exception cref="T:LumiSoft.Net.IO.DataSizeExceededException">Is raised when ignoreBufferFull = false and FIFO buffer has no room to store data.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.FifoBuffer.Clear">
            <summary>
            Clears buffer data.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.FifoBuffer.TrimStart">
            <summary>
            Removes unused space from the buffer beginning.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.FifoBuffer.MaxSize">
            <summary>
            Gets maximum number of bytes can buffer in FIFO.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.FifoBuffer.Available">
            <summary>
            Gets number of bytes avialable in FIFO.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IO.MemoryStreamEx">
            <summary>
            This class represents auto switching memory/temp-file stream.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.MemoryStreamEx.#ctor(System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="memSize">Maximum bytes store to memory, before switching over temporary file.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.MemoryStreamEx.Finalize">
            <summary>
            Destructor - Just incase user won't call dispose.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.MemoryStreamEx.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.MemoryStreamEx.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.MemoryStreamEx.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the <b>origin</b> parameter.</param>
            <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.MemoryStreamEx.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.MemoryStreamEx.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.MemoryStreamEx.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.MemoryStreamEx.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.MemoryStreamEx.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.MemoryStreamEx.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.MemoryStreamEx.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="M:LumiSoft.Net.IO.MemoryStreamEx.Seek(System.Int64,System.IO.SeekOrigin)">Is raised when this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.MemoryStreamEx.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="T:LumiSoft.Net.IO.QuotedPrintableStream">
            <summary>
            Implements RFC 2045 6.7. Quoted-Printable stream.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.QuotedPrintableStream.#ctor(LumiSoft.Net.IO.SmartStream,System.IO.FileAccess)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Source stream.</param>
            <param name="access">Specifies stream access mode.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.QuotedPrintableStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.QuotedPrintableStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="offset">A byte offset relative to the <b>origin</b> parameter.</param>
            <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.QuotedPrintableStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.QuotedPrintableStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when reading not supported.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.QuotedPrintableStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encodes a sequence of bytes, writes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when reading not supported.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.QuotedPrintableStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.QuotedPrintableStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.QuotedPrintableStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.QuotedPrintableStream.Length">
            <summary>
            Gets the length in bytes of the stream.  This method is not supported and always throws a NotSupportedException.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.QuotedPrintableStream.Position">
            <summary>
            Gets or sets the position within the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this property is accessed.</exception>
        </member>
        <member name="T:LumiSoft.Net.IO.ReadWriteControlledStream">
            <summary>
            This class implements read,write or read-write access stream.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.ReadWriteControlledStream.#ctor(System.IO.Stream,System.IO.FileAccess)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Source stream.</param>
            <param name="access">This stream access mode.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.ReadWriteControlledStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.ReadWriteControlledStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="offset">A byte offset relative to the <b>origin</b> parameter.</param>
            <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
        </member>
        <member name="M:LumiSoft.Net.IO.ReadWriteControlledStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.ReadWriteControlledStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when reading not supported.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.ReadWriteControlledStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when reading not supported.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadWriteControlledStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadWriteControlledStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadWriteControlledStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadWriteControlledStream.Length">
            <summary>
            Gets the length in bytes of the stream.  This method is not supported and always throws a NotSupportedException.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadWriteControlledStream.Position">
            <summary>
            Gets or sets the position within the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="T:LumiSoft.Net.KeyValueCollection`2">
            <summary>
            Represents a collection that can be accessed either with the key or with the index. 
            </summary>
        </member>
        <member name="M:LumiSoft.Net.KeyValueCollection`2.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.KeyValueCollection`2.Add(`0,`1)">
            <summary>
            Adds the specified key and value to the collection.
            </summary>
            <param name="key">Key.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:LumiSoft.Net.KeyValueCollection`2.Remove(`0)">
            <summary>
            Removes the value with the specified key from the collection.
            </summary>
            <param name="key">Key.</param>
            <returns>Returns if key found and removed, otherwise false.</returns>
        </member>
        <member name="M:LumiSoft.Net.KeyValueCollection`2.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.KeyValueCollection`2.ContainsKey(`0)">
            <summary>
            Gets if the collection contains the specified key.
            </summary>
            <param name="key">Key.</param>
            <returns>Returns true if the collection contains specified key.</returns>
        </member>
        <member name="M:LumiSoft.Net.KeyValueCollection`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">Key.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found.</param>
            <returns>Returns true if the collection contains specified key and value stored to <b>value</b> argument.</returns>
        </member>
        <member name="M:LumiSoft.Net.KeyValueCollection`2.TryGetValueAt(System.Int32,`1@)">
            <summary>
            Gets the value at the specified index.
            </summary>
            <param name="index">Zero based item index.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found.</param>
            <returns>Returns true if the collection contains specified key and value stored to <b>value</b> argument.</returns>
        </member>
        <member name="M:LumiSoft.Net.KeyValueCollection`2.ToArray">
            <summary>
            Copies all elements to new array, all elements will be in order they added. This method is thread-safe.
            </summary>
            <returns>Returns elements in a new array.</returns>
        </member>
        <member name="M:LumiSoft.Net.KeyValueCollection`2.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns>Returns IEnumerator interface.</returns>
        </member>
        <member name="P:LumiSoft.Net.KeyValueCollection`2.Count">
            <summary>
            Gets number of items int he collection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.KeyValueCollection`2.Item(`0)">
            <summary>
            Gets item with the specified key.
            </summary>
            <param name="key">Key.</param>
            <returns>Returns item with the specified key. If the specified key is not found, a get operation throws a KeyNotFoundException.</returns>
        </member>
        <member name="T:LumiSoft.Net.ParseException">
            <summary>
            This exception is thrown when parse errors are encountered.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.ParseException.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:LumiSoft.Net.Range_long">
            <summary>
            This class represent 2-point <b>long</b> value range.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Range_long.#ctor(System.Int64)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">Start/End value.</param>
        </member>
        <member name="M:LumiSoft.Net.Range_long.#ctor(System.Int64,System.Int64)">
            <summary>
            Default constructor.
            </summary>
            <param name="start">Range start value.</param>
            <param name="end">Range end value.</param>
        </member>
        <member name="M:LumiSoft.Net.Range_long.Contains(System.Int64)">
            <summary>
            Gets if the specified value is within range.
            </summary>
            <param name="value">Value to check.</param>
            <returns>Returns true if specified value is within range, otherwise false.</returns>
        </member>
        <member name="P:LumiSoft.Net.Range_long.Start">
            <summary>
            Gets range start.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Range_long.End">
            <summary>
            Gets range end.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.BalanceMode">
            <summary>
            This enum specified balance mode.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.BalanceMode.LoadBalance">
            <summary>
            Operation is load balanched by all workers.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.BalanceMode.FailOver">
            <summary>
            Operation will be handed over to next worker, if last one fails.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.EventArgs`1">
            <summary>
            This class universal event arguments for transporting single value.
            </summary>
            <typeparam name="T">Event data.</typeparam>
        </member>
        <member name="M:LumiSoft.Net.EventArgs`1.#ctor(`0)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">Event data.</param>
        </member>
        <member name="P:LumiSoft.Net.EventArgs`1.Value">
            <summary>
            Gets event data.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.ExceptionEventArgs">
            <summary>
            This class provides data for error events and methods.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.ExceptionEventArgs.#ctor(System.Exception)">
            <summary>
            Default constructor.
            </summary>
            <param name="exception">Exception.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>exception</b> is null reference value.</exception>
        </member>
        <member name="P:LumiSoft.Net.ExceptionEventArgs.Exception">
            <summary>
            Gets exception.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.FTP.Client.FTP_ClientException">
            <summary>
            FTP client exception.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_ClientException.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="responseLine">FTP server response line.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>responseLine</b> is null.</exception>
        </member>
        <member name="P:LumiSoft.Net.FTP.Client.FTP_ClientException.StatusCode">
            <summary>
            Gets FTP status code.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.Client.FTP_ClientException.ResponseText">
            <summary>
            Gets FTP server response text after status code.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.Client.FTP_ClientException.IsPermanentError">
            <summary>
            Gets if it is permanent FTP(5xx) error.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.FTP.FTP_ListItem">
            <summary>
            This class holds single file or directory in the FTP server.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.FTP_ListItem.#ctor(System.String,System.Int64,System.DateTime,System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">Directory or file name.</param>
            <param name="size">File size in bytes, zero for directory.</param>
            <param name="modified">Directory or file last modification time.</param>
            <param name="isDir">Specifies if list item is directory or file.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>name</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="P:LumiSoft.Net.FTP.FTP_ListItem.IsDir">
            <summary>
            Gets if current item is directory.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.FTP_ListItem.IsFile">
            <summary>
            Gets if current item is file.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.FTP_ListItem.Name">
            <summary>
            Gets the name of the file or directory.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.FTP_ListItem.Size">
            <summary>
            Gets file size in bytes.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.FTP_ListItem.Modified">
            <summary>
            Gets last time file or direcory was modified.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.FTP.FTP_TransferMode">
            <summary>
            Specifies FTP data connection transfer mode.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.FTP.FTP_TransferMode.Active">
            <summary>
            Active transfer mode - FTP server opens data connection FTP client.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.FTP.FTP_TransferMode.Passive">
            <summary>
            Passive transfer mode - FTP client opens data connection FTP server.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.HostEndPoint">
            <summary>
            Represents a network endpoint as an host(name or IP address) and a port number.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.HostEndPoint.#ctor(System.String,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="host">Host name or IP address.</param>
            <param name="port">The port number associated with the host. Value -1 means port not specified.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>host</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.HostEndPoint.#ctor(System.Net.IPEndPoint)">
            <summary>
            Default constructor.
            </summary>
            <param name="endPoint">Host IP end point.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>endPoint</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.HostEndPoint.Parse(System.String)">
            <summary>
            Parses HostEndPoint from the specified string.
            </summary>
            <param name="value">HostEndPoint value.</param>
            <returns>Returns parsed HostEndPoint value.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.HostEndPoint.Parse(System.String,System.Int32)">
            <summary>
            Parses HostEndPoint from the specified string.
            </summary>
            <param name="value">HostEndPoint value.</param>
            <param name="defaultPort">If port isn't specified in value, specified port will be used.</param>
            <returns>Returns parsed HostEndPoint value.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.HostEndPoint.ToString">
            <summary>
            Returns HostEndPoint as string.
            </summary>
            <returns>Returns HostEndPoint as string.</returns>
        </member>
        <member name="P:LumiSoft.Net.HostEndPoint.IsIPAddress">
            <summary>
            Gets if <b>Host</b> is IP address.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.HostEndPoint.Host">
            <summary>
            Gets host name or IP address.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.HostEndPoint.Port">
            <summary>
            Gets the port number of the endpoint. Value -1 means port not specified.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IO.Base64Stream">
            <summary>
            This class implements base64 encoder/decoder. Defined in RFC 4648.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.Base64Stream.#ctor(System.IO.Stream,System.Boolean,System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Stream which to encode/decode.</param>
            <param name="owner">Specifies if Base64Stream is owner of <b>stream</b>.</param>
            <param name="addLineBreaks">Specifies if encoder inserts CRLF after each 76 bytes.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.Base64Stream.#ctor(System.IO.Stream,System.Boolean,System.Boolean,System.IO.FileAccess)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Stream which to encode/decode.</param>
            <param name="owner">Specifies if Base64Stream is owner of <b>stream</b>.</param>
            <param name="addLineBreaks">Specifies if encoder inserts CRLF after each 76 bytes.</param>
            <param name="access">This stream access mode.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.Base64Stream.Dispose">
            <summary>
            Celans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.Base64Stream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.Base64Stream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="offset">A byte offset relative to the <b>origin</b> parameter.</param>
            <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.Base64Stream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="M:LumiSoft.Net.IO.Base64Stream.Seek(System.Int64,System.IO.SeekOrigin)">Is raised when this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.Base64Stream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when any of the arguments has out of valid range.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when reading not supported.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.Base64Stream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encodes a sequence of bytes, writes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this.Finish has been called and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when reading not supported.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.Base64Stream.Finish">
            <summary>
            Completes encoding. Call this method if all data has written and no more data. 
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.Base64Stream.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.Base64Stream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.Base64Stream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.Base64Stream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.Base64Stream.Length">
            <summary>
            Gets the length in bytes of the stream.  This method is not supported and always throws a NotSupportedException.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.Base64Stream.Position">
            <summary>
            Gets or sets the position within the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this property is accessed.</exception>
        </member>
        <member name="T:LumiSoft.Net.IO.MultiStream">
            <summary>
            This class combines multiple stream into one stream for reading.
            The most common usage for that stream is when you need to insert some data to the beginning of some stream.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.MultiStream.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.MultiStream.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.MultiStream.AppendStream(System.IO.Stream)">
            <summary>
            Appends this stream to read queue.
            </summary>
            <param name="stream">Stream to add.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.MultiStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.MultiStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="offset">A byte offset relative to the <b>origin</b> parameter.</param>
            <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.MultiStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="M:LumiSoft.Net.IO.MultiStream.Seek(System.Int64,System.IO.SeekOrigin)">Is raised when this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.MultiStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.MultiStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this method is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.MultiStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.MultiStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.MultiStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.MultiStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when one of the source streams won't support <b>Length</b> property.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.MultiStream.Position">
            <summary>
            Gets or sets the position within the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this property is accessed.</exception>
        </member>
        <member name="T:LumiSoft.Net.IO.PartialStream">
            <summary>
            Implements read-only stream what operates on specified range of source stream
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.PartialStream.#ctor(System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Source stream.</param>
            <param name="start">Zero based start positon in source stream.</param>
            <param name="length">Length of stream.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.PartialStream.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.PartialStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.PartialStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the <b>origin</b> parameter.</param>
            <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.PartialStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.PartialStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.PartialStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this method is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.PartialStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.PartialStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.PartialStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.PartialStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="M:LumiSoft.Net.IO.PartialStream.Seek(System.Int64,System.IO.SeekOrigin)">Is raised when this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.PartialStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="T:LumiSoft.Net.IO.SmartStream">
            <summary>
            This class is wrapper to normal stream, provides most needed stream methods which are missing from normal stream.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Stream to wrap.</param>
            <param name="owner">Specifies if SmartStream is owner of <b>stream</b>.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadLine(LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP,System.Boolean)">
            <summary>
            Begins line reading.
            </summary>
            <param name="op">Read line opeartion.</param>
            <param name="async">If true then this method can complete asynchronously. If false, this method completed always syncronously.</param>
            <returns>Returns true if read line completed synchronously, false if asynchronous operation pending.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.BeginReadHeader(System.IO.Stream,System.Int32,LumiSoft.Net.IO.SizeExceededAction,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous header reading from the source stream.
            </summary>
            <param name="storeStream">Stream where to store readed header.</param>
            <param name="maxCount">Maximum number of bytes to read. Value 0 means not limited.</param>
            <param name="exceededAction">Specifies action what is done if <b>maxCount</b> number of bytes has exceeded.</param>
            <param name="callback">The AsyncCallback delegate that is executed when asynchronous operation completes.</param>
            <param name="state">An object that contains any additional user-defined data.</param>
            <returns>An IAsyncResult that represents the asynchronous call.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>storeStream</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.EndReadHeader(System.IAsyncResult)">
            <summary>
            Handles the end of an asynchronous header reading.
            </summary>
            <param name="asyncResult">An IAsyncResult that represents an asynchronous call.</param>
            <returns>Returns number of bytes stored to <b>storeStream</b>.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>asyncResult</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid <b>asyncResult</b> passed to this method.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when <b>EndReadLine</b> has already been called for specified <b>asyncResult</b>.</exception>
            <exception cref="T:LumiSoft.Net.IO.LineSizeExceededException">Is raised when source stream has too big line.</exception>
            <exception cref="T:LumiSoft.Net.IO.DataSizeExceededException">Is raised when reading exceeds <b>maxCount</b> specified value.</exception>
            <exception cref="T:LumiSoft.Net.IO.IncompleteDataException">Is raised when source stream closed before header-terminator reached.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadHeader(System.IO.Stream,System.Int32,LumiSoft.Net.IO.SizeExceededAction)">
            <summary>
            Reads header from stream and stores to the specified <b>storeStream</b>.
            </summary>
            <param name="storeStream">Stream where to store readed header.</param>
            <param name="maxCount">Maximum number of bytes to read. Value 0 means not limited.</param>
            <param name="exceededAction">Specifies action what is done if <b>maxCount</b> number of bytes has exceeded.</param>
            <returns>Returns how many bytes readed from source stream.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>storeStream</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:LumiSoft.Net.IO.LineSizeExceededException">Is raised when source stream has too big line.</exception>
            <exception cref="T:LumiSoft.Net.IO.DataSizeExceededException">Is raised when reading exceeds <b>maxCount</b> specified value.</exception>
            <exception cref="T:LumiSoft.Net.IO.IncompleteDataException">Is raised when source stream closed before header-terminator reached.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadPeriodTerminated(LumiSoft.Net.IO.SmartStream.ReadPeriodTerminatedAsyncOP,System.Boolean)">
            <summary>
            Begins period-terminated data reading.
            </summary>
            <param name="op">Read period terminated opeartion.</param>
            <param name="async">If true then this method can complete asynchronously. If false, this method completed always syncronously.</param>
            <returns>Returns true if read line completed synchronously, false if asynchronous operation pending.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.BeginReadFixedCount(System.IO.Stream,System.Int64,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous data reading from the source stream.
            </summary>
            <param name="storeStream">Stream where to store readed header.</param>
            <param name="count">Number of bytes to read.</param>
            <param name="callback">The AsyncCallback delegate that is executed when asynchronous operation completes.</param>
            <param name="state">An object that contains any additional user-defined data.</param>
            <returns>An IAsyncResult that represents the asynchronous call.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>storeStream</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.EndReadFixedCount(System.IAsyncResult)">
            <summary>
            Handles the end of an asynchronous data reading.
            </summary>
            <param name="asyncResult">An IAsyncResult that represents an asynchronous call.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>asyncResult</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid <b>asyncResult</b> passed to this method.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when <b>EndReadToStream</b> has already been called for specified <b>asyncResult</b>.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadFixedCount(System.IO.Stream,System.Int64)">
            <summary>
            Reads specified number of bytes from source stream and writes to the specified stream.
            </summary>
            <param name="storeStream">Stream where to store readed data.</param>
            <param name="count">Number of bytes to read.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>storeStream</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadFixedCountString(System.Int32)">
            <summary>
            Reads specified number of bytes from source stream and converts it to string with current encoding.
            </summary>
            <param name="count">Number of bytes to read.</param>
            <returns>Returns readed data as string.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadAll(System.IO.Stream)">
            <summary>
            Reads all data from source stream and stores to the specified stream.
            </summary>
            <param name="stream">Stream where to store readed data.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.Peek">
            <summary>
            Returns the next available character but does not consume it.
            </summary>
            <returns>An integer representing the next character to be read, or -1 if no more characters are available.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.Write(System.String)">
            <summary>
            Writes specified string data to stream.
            </summary>
            <param name="data">Data to write.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>data</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.WriteLine(System.String)">
            <summary>
            Writes specified line to stream. If CRLF is missing, it will be added automatically to line data.
            </summary>
            <param name="line">Line to send.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>line</b> is null.</exception>
            <returns>Returns number of raw bytes written.</returns>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.WriteStream(System.IO.Stream)">
            <summary>
            Writes all source <b>stream</b> data to stream.
            </summary>
            <param name="stream">Stream which data to write.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.WriteStream(System.IO.Stream,System.Int64)">
            <summary>
            Writes specified number of bytes from source <b>stream</b> to stream.
            </summary>
            <param name="stream">Stream which data to write.</param>
            <param name="count">Number of bytes to write.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when <b>count</b> argument has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.WriteStreamAsync(LumiSoft.Net.IO.SmartStream.WriteStreamAsyncOP)">
            <summary>
            Starts writing stream data to this stream.
            </summary>
            <param name="op">Asynchronous operation.</param>
            <returns>Returns true if aynchronous operation is pending (The <see cref="E:LumiSoft.Net.IO.SmartStream.WriteStreamAsyncOP.CompletedAsync"/> event is raised upon completion of the operation).
            Returns false if operation completed synchronously.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.WritePeriodTerminated(System.IO.Stream)">
            <summary>
            Writes period handled and terminated data to this stream.
            </summary>
            <param name="stream">Source stream. Reading starts from stream current location.</param>
            <returns>Returns number of bytes written to stream.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.IO.LineSizeExceededException">Is raised when <b>stream</b> has too big line.</exception>        
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.WritePeriodTerminatedAsync(LumiSoft.Net.IO.SmartStream.WritePeriodTerminatedAsyncOP)">
            <summary>
            Starts writing period handled and terminated data to this stream.
            </summary>
            <param name="op">Asynchronous operation.</param>
            <returns>Returns true if aynchronous operation is pending (The <see cref="E:LumiSoft.Net.IO.SmartStream.WritePeriodTerminatedAsyncOP.CompletedAsync"/> event is raised upon completion of the operation).
            Returns false if operation completed synchronously.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.WriteHeader(System.IO.Stream)">
            <summary>
            Reads header from source <b>stream</b> and writes it to stream.
            </summary>
            <param name="stream">Stream from where to read header.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the <b>origin</b> parameter.</param>
            <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous read operation.
            </summary>
            <param name="buffer">The buffer to read the data into.</param>
            <param name="offset">The byte offset in buffer at which to begin writing data read from the stream.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <param name="callback">An optional asynchronous callback, to be called when the read is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
            <returns>An IAsyncResult that represents the asynchronous read, which could still be pending.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when any of the arguments has out of valid range.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.EndRead(System.IAsyncResult)">
            <summary>
            Handles the end of an asynchronous data reading.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
            <returns>The total number of bytes read into the <b>buffer</b>. This can be less than the number of bytes requested 
            if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>asyncResult</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when any of the arguments has out of valid range.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous write operation.
            </summary>
            <param name="buffer">The buffer to write data from.</param>
            <param name="offset">The byte offset in buffer from which to begin writing.</param>
            <param name="count">The maximum number of bytes to write.</param>
            <param name="callback">An optional asynchronous callback, to be called when the write is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous write request from other requests.</param>
            <returns>An IAsyncResult that represents the asynchronous write, which could still be pending.</returns>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.EndWrite(System.IAsyncResult)">
            <summary>
            Ends an asynchronous write operation.
            </summary>
            <param name="asyncResult">A reference to the outstanding asynchronous I/O request.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.BufferRead(System.Boolean,LumiSoft.Net.IO.SmartStream.BufferCallback)">
            <summary>
            Begins buffering read-buffer.
            </summary>
            <param name="async">If true then this method can complete asynchronously. If false, this method completed always syncronously.</param>
            <param name="asyncCallback">The callback that is executed when asynchronous operation completes. 
            If operation completes synchronously, no callback called.</param>
            <returns>
            Returns true if the I/O operation is pending. The BufferReadAsyncEventArgs.Completed event on the context parameter will be raised upon completion of the operation. 
            Returns false if the I/O operation completed synchronously. The BufferReadAsyncEventArgs.Completed event on the context parameter will not be raised and the context object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation. 
            </returns>
            <exception cref="T:System.InvalidOperationException">Is raised when there is data in read buffer and this method is called.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.BeginReadLine(System.Byte[],System.Int32,System.Int32,LumiSoft.Net.IO.SizeExceededAction,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous line reading from the source stream.
            </summary>
            <param name="buffer">Buffer where to store readed line data.</param>
            <param name="offset">The location in <b>buffer</b> to begin storing the data.</param>
            <param name="maxCount">Maximum number of bytes to read.</param>
            <param name="exceededAction">Specifies how this method behaves when maximum line size exceeded.</param>
            <param name="callback">The AsyncCallback delegate that is executed when asynchronous operation completes.</param>
            <param name="state">An object that contains any additional user-defined data.</param>
            <returns>An IAsyncResult that represents the asynchronous call.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.EndReadLine(System.IAsyncResult)">
            <summary>
            Handles the end of an asynchronous line reading.
            </summary>
            <param name="asyncResult">An IAsyncResult that represents an asynchronous call.</param>
            <returns>Returns number of bytes stored to <b>buffer</b>. Returns -1 if no more data, end of stream reached.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>asyncResult</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid <b>asyncResult</b> passed to this method.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when <b>EndReadLine</b> has already been called for specified <b>asyncResult</b>.</exception>
            <exception cref="T:LumiSoft.Net.IO.LineSizeExceededException">Is raised when <b>maxCount</b> value is exceeded.</exception>        
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.SourceStream">
            <summary>
            Gets this stream underlying stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.IsOwner">
            <summary>
            Gets if SmartStream is owner of source stream. This property affects like closing this stream will close SourceStream if IsOwner true.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.LastActivity">
            <summary>
            Gets the last time when data was read or written.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.BytesReaded">
            <summary>
            Gets how many bytes are readed through this stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.BytesWritten">
            <summary>
            Gets how many bytes are written through this stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.BytesInReadBuffer">
            <summary>
            Gets number of bytes in read buffer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.Encoding">
            <summary>
            Gets or sets string related methods default encoding.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when null value is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="T:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP">
            <summary>
            This class implements read line operation.
            </summary>
            <remarks>This class can be reused on multiple calls of <see cref="M:LumiSoft.Net.IO.SmartStream.ReadLine(LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP,System.Boolean)">SmartStream.ReadLine</see> method.</remarks>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP.#ctor(System.Byte[],LumiSoft.Net.IO.SizeExceededAction)">
            <summary>
            Default constructor.
            </summary>
            <param name="buffer">Line buffer.</param>
            <param name="exceededAction">Specifies how line-reader behaves when maximum line size exceeded.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP.Start(System.Boolean,LumiSoft.Net.IO.SmartStream)">
            <summary>
            Starts reading line.
            </summary>
            <param name="async">If true then this method can complete asynchronously. If false, this method completed always syncronously.</param>
            <param name="stream">Owner SmartStream.</param>
            <returns>Returns true if read line completed synchronously, false if asynchronous operation pending.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP.Buffering_Completed(System.Exception)">
            <summary>
            Is called when asynchronous read buffer buffering has completed.
            </summary>
            <param name="x">Exception that occured during async operation.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP.DoLineReading(System.Boolean)">
            <summary>
            Starts/continues line reading.
            </summary>
            <param name="async">If true then this method can complete asynchronously. If false, this method completed always syncronously.</param>
            <returns>Returns true if line reading completed.</returns>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP.SetInfo(System.Int32,System.Exception)">
            <summary>
            Sets specified field values.
            </summary>
            <param name="bytesInBuffer">Number of bytes in buffer.</param>
            <param name="exception">Exception.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP.OnCompleted">
            <summary>
            Raises <b>Completed</b> event.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP.IsCompleted">
            <summary>
            Gets if asynchronous operation has completed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP.IsCompletedSynchronously">
            <summary>
            Gets if operation completed synchronously.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP.SizeExceededAction">
            <summary>
            Gets line size exceeded action.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP.Buffer">
            <summary>
            Gets line buffer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP.BytesInBuffer">
            <summary>
            Gets number of bytes stored in the buffer. Ending line-feed characters included.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP.LineBytesInBuffer">
            <summary>
            Gets number of line data bytes stored in the buffer. Ending line-feed characters not included.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP.LineAscii">
            <summary>
            Gets line as ASCII string. Returns null if EOS(end of stream) reached. Ending line-feed characters not included.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP.LineUtf8">
            <summary>
            Gets line as UTF-8 string. Returns null if EOS(end of stream) reached. Ending line-feed characters not included.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP.LineUtf32">
            <summary>
            Gets line as UTF-32 string. Returns null if EOS(end of stream) reached. Ending line-feed characters not included.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP.Error">
            <summary>
            Gets error occured during asynchronous operation. Value null means no error.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="E:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP.Completed">
            <summary>
            Is raised when asynchronous operation has completed.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IO.SmartStream.ReadPeriodTerminatedAsyncOP">
            <summary>
            This class implements read period-terminated operation.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadPeriodTerminatedAsyncOP.#ctor(System.IO.Stream,System.Int64,LumiSoft.Net.IO.SizeExceededAction)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Stream wehre to sore readed data.</param>
            <param name="maxCount">Maximum number of bytes to read. Value 0 means not limited.</param>
            <param name="exceededAction">Specifies how period-terminated reader behaves when <b>maxCount</b> exceeded.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadPeriodTerminatedAsyncOP.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadPeriodTerminatedAsyncOP.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadPeriodTerminatedAsyncOP.Start(LumiSoft.Net.IO.SmartStream)">
            <summary>
            Starts period-terminated data reading.
            </summary>
            <param name="stream">Owner SmartStream.</param>
            <returns>Returns true if read line completed synchronously, false if asynchronous operation pending.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadPeriodTerminatedAsyncOP.m_pReadLineOP_Completed(System.Object,LumiSoft.Net.EventArgs{LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP})">
            <summary>
            Is called when asynchronous line reading has completed.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadPeriodTerminatedAsyncOP.DoRead">
            <summary>
            Continues period-terminated reading.
            </summary>
            <returns>Returns true if read line completed synchronously, false if asynchronous operation pending.</returns>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadPeriodTerminatedAsyncOP.ProcessReadedLine">
            <summary>
            Processes readed line.
            </summary>
            <returns>Returns true if read period-terminated operation has completed.</returns>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadPeriodTerminatedAsyncOP.OnCompleted">
            <summary>
            Raises <b>Completed</b> event.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadPeriodTerminatedAsyncOP.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadPeriodTerminatedAsyncOP.IsCompleted">
            <summary>
            Gets if asynchronous operation has completed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadPeriodTerminatedAsyncOP.IsCompletedSynchronously">
            <summary>
            Gets if operation completed synchronously.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadPeriodTerminatedAsyncOP.Stream">
            <summary>
            Gets stream where period terminated data has stored.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadPeriodTerminatedAsyncOP.BytesStored">
            <summary>
            Gets number of bytes stored to <see cref="P:LumiSoft.Net.IO.SmartStream.ReadPeriodTerminatedAsyncOP.Stream">Stream</see> stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadPeriodTerminatedAsyncOP.LinesStored">
            <summary>
            Gets number of lines stored to <see cref="P:LumiSoft.Net.IO.SmartStream.ReadPeriodTerminatedAsyncOP.Stream">Stream</see> stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadPeriodTerminatedAsyncOP.Error">
            <summary>
            Gets error occured during asynchronous operation. Value null means no error.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="E:LumiSoft.Net.IO.SmartStream.ReadPeriodTerminatedAsyncOP.Completed">
            <summary>
            Is raised when asynchronous operation has completed.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IO.SmartStream.BufferReadAsyncOP">
            <summary>
            This class implements asynchronous read buffering.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.BufferReadAsyncOP.#ctor(LumiSoft.Net.IO.SmartStream)">
            <summary>
            Default constructor.
            </summary>
            <param name="owner">Owner stream.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.BufferReadAsyncOP.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.BufferReadAsyncOP.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.BufferReadAsyncOP.Start(System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Starts asynchronous operation.
            </summary>
            <param name="async">If true then this method can complete asynchronously. If false, this method completed always syncronously.</param>
            <param name="buffer">Buffer where to store readed data.</param>
            <param name="count">Maximum number of bytes to read.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <returns>Returns true if operation completed synchronously, false if asynchronous operation pending.</returns>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.BufferReadAsyncOP.ReleaseEvents">
            <summary>
            Releases all events attached to this class.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.BufferReadAsyncOP.OnCompleted">
            <summary>
            Raises <b>Completed</b> event.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.BufferReadAsyncOP.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.BufferReadAsyncOP.IsCompleted">
            <summary>
            Gets if asynchronous operation has completed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.BufferReadAsyncOP.IsCompletedSynchronously">
            <summary>
            Gets if operation completed synchronously.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.BufferReadAsyncOP.Buffer">
            <summary>
            Gets read buffer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.BufferReadAsyncOP.BytesInBuffer">
            <summary>
            Gets number of bytes stored in read buffer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.BufferReadAsyncOP.Error">
            <summary>
            Gets error occured during asynchronous operation. Value null means no error.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="E:LumiSoft.Net.IO.SmartStream.BufferReadAsyncOP.Completed">
            <summary>
            Is raised when asynchronous operation has completed.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IO.SmartStream.WriteStreamAsyncOP">
            <summary>
            This class represents <see cref="M:LumiSoft.Net.IO.SmartStream.WriteStreamAsync(LumiSoft.Net.IO.SmartStream.WriteStreamAsyncOP)"/> asynchronous operation.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.WriteStreamAsyncOP.#ctor(System.IO.Stream,System.Int64)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Stream which data to write.</param>
            <param name="count">Number of bytes to write. Value -1 means all stream data will be written.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.WriteStreamAsyncOP.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.WriteStreamAsyncOP.Start(LumiSoft.Net.IO.SmartStream)">
            <summary>
            Starts operation processing.
            </summary>
            <param name="owner">Owner SmartStream.</param>
            <returns>Returns true if asynchronous operation in progress or false if operation completed synchronously.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.WriteStreamAsyncOP.SetState(LumiSoft.Net.AsyncOP_State)">
            <summary>
            Sets operation state.
            </summary>
            <param name="state">New state.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.WriteStreamAsyncOP.BeginReadData">
            <summary>
            Starts reading data.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.WriteStreamAsyncOP.ProcessReadDataResult(System.IAsyncResult)">
            <summary>
            Processes read data result.
            </summary>
            <param name="readResult">Asynchronous result.</param>
            <returns>Retruns true if this method completed asynchronously, otherwise false.</returns>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.WriteStreamAsyncOP.OnCompletedAsync">
            <summary>
            Raises <b>CompletedAsync</b> event.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.WriteStreamAsyncOP.State">
            <summary>
            Gets asynchronous operation state.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.WriteStreamAsyncOP.Error">
            <summary>
            Gets error happened during operation. Returns null if no error.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed other than <b>AsyncOP_State.Completed</b> state.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.WriteStreamAsyncOP.BytesWritten">
            <summary>
            Gets number of bytes written.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed other than <b>AsyncOP_State.Completed</b> state.</exception>
        </member>
        <member name="E:LumiSoft.Net.IO.SmartStream.WriteStreamAsyncOP.CompletedAsync">
            <summary>
            Is called when asynchronous operation has completed.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IO.SmartStream.WritePeriodTerminatedAsyncOP">
            <summary>
            This class represents <see cref="M:LumiSoft.Net.IO.SmartStream.WritePeriodTerminatedAsync(LumiSoft.Net.IO.SmartStream.WritePeriodTerminatedAsyncOP)"/> asynchronous operation.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.WritePeriodTerminatedAsyncOP.#ctor(System.IO.Stream)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Source stream. Reading starts from stream current location.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.WritePeriodTerminatedAsyncOP.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.WritePeriodTerminatedAsyncOP.Start(LumiSoft.Net.IO.SmartStream)">
            <summary>
            Starts operation processing.
            </summary>
            <param name="owner">Owner SmartStream.</param>
            <returns>Returns true if asynchronous operation in progress or false if operation completed synchronously.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.WritePeriodTerminatedAsyncOP.SetState(LumiSoft.Net.AsyncOP_State)">
            <summary>
            Sets operation state.
            </summary>
            <param name="state">New state.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.WritePeriodTerminatedAsyncOP.ReadLineCompleted(LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP)">
            <summary>
            Is called when source stream read line reading has completed.
            </summary>
            <param name="op">Asynchronous operation.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.WritePeriodTerminatedAsyncOP.SendLineCompleted(System.IAsyncResult)">
            <summary>
            Is called when line sending has completed.
            </summary>
            <param name="ar">Asynchronous result.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.WritePeriodTerminatedAsyncOP.SendTerminatorCompleted(System.IAsyncResult)">
            <summary>
            Is called when ".CRLF" or "CRLF.CRLF" terminator sending has completed.
            </summary>
            <param name="ar">Asynchronous result.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.WritePeriodTerminatedAsyncOP.OnCompletedAsync">
            <summary>
            Raises <b>CompletedAsync</b> event.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.WritePeriodTerminatedAsyncOP.State">
            <summary>
            Gets asynchronous operation state.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.WritePeriodTerminatedAsyncOP.Error">
            <summary>
            Gets error happened during operation. Returns null if no error.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed other than <b>AsyncOP_State.Completed</b> state.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.WritePeriodTerminatedAsyncOP.BytesWritten">
            <summary>
            Gets number of bytes written.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed other than <b>AsyncOP_State.Completed</b> state.</exception>
        </member>
        <member name="E:LumiSoft.Net.IO.SmartStream.WritePeriodTerminatedAsyncOP.CompletedAsync">
            <summary>
            Is called when asynchronous operation has completed.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOperation">
            <summary>
            This class implements asynchronous line reading.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOperation.#ctor(LumiSoft.Net.IO.SmartStream,System.Byte[],System.Int32,System.Int32,LumiSoft.Net.IO.SizeExceededAction,System.AsyncCallback,System.Object)">
            <summary>
            Default constructor.
            </summary>
            <param name="owner">Owner stream.</param>
            <param name="buffer">Buffer where to store data.</param>
            <param name="offset">The location in <b>buffer</b> to begin storing the data.</param>
            <param name="maxCount">Maximum number of bytes to read.</param>
            <param name="exceededAction">Specifies how this method behaves when maximum line size exceeded.</param>
            <param name="callback">The AsyncCallback delegate that is executed when asynchronous operation completes.</param>
            <param name="asyncState">User-defined object that qualifies or contains information about an asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b>,<b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when any of the arguments has out of valid range.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOperation.Buffering_Completed(System.Exception)">
            <summary>
            Is called when asynchronous read buffer buffering has completed.
            </summary>
            <param name="x">Exception that occured during async operation.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOperation.DoLineReading">
            <summary>
            Does line reading.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOperation.Completed">
            <summary>
            This method must be called when asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOperation.AsyncState">
            <summary>
            Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOperation.AsyncWaitHandle">
            <summary>
            Gets a WaitHandle that is used to wait for an asynchronous operation to complete.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOperation.CompletedSynchronously">
            <summary>
            Gets an indication of whether the asynchronous operation completed synchronously.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOperation.IsCompleted">
            <summary>
            Gets an indication whether the asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOperation.IsEndCalled">
            <summary>
            Gets or sets if <b>EndReadLine</b> method is called for this asynchronous operation.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOperation.Buffer">
            <summary>
            Gets store buffer.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOperation.BytesReaded">
            <summary>
            Gets number of bytes readed from source stream.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOperation.BytesStored">
            <summary>
            Gets number of bytes stored in to <b>Buffer</b>.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IO.SmartStream.ReadToTerminatorAsyncOperation">
            <summary>
            This class implements asynchronous line-based terminated data reader, where terminator is on line itself.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadToTerminatorAsyncOperation.#ctor(LumiSoft.Net.IO.SmartStream,System.String,System.IO.Stream,System.Int64,LumiSoft.Net.IO.SizeExceededAction,System.AsyncCallback,System.Object)">
            <summary>
            Default constructor.
            </summary>
            <param name="owner">Owner stream.</param>
            <param name="terminator">Data terminator.</param>
            <param name="storeStream">Stream where to store readed header.</param>
            <param name="maxCount">Maximum number of bytes to read. Value 0 means not limited.</param>
            <param name="exceededAction">Specifies how this method behaves when maximum line size exceeded.</param>
            <param name="callback">The AsyncCallback delegate that is executed when asynchronous operation completes.</param>
            <param name="asyncState">User-defined object that qualifies or contains information about an asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b>,<b>terminator</b> or <b>storeStream</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadToTerminatorAsyncOperation.ReadLine_Completed(System.IAsyncResult)">
            <summary>
            This method is called when asyynchronous line reading has completed.
            </summary>
            <param name="asyncResult">An IAsyncResult that represents an asynchronous call.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadToTerminatorAsyncOperation.Completed">
            <summary>
            This method must be called when asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadToTerminatorAsyncOperation.Terminator">
            <summary>
            Gets terminator.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadToTerminatorAsyncOperation.AsyncState">
            <summary>
            Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadToTerminatorAsyncOperation.AsyncWaitHandle">
            <summary>
            Gets a WaitHandle that is used to wait for an asynchronous operation to complete.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadToTerminatorAsyncOperation.CompletedSynchronously">
            <summary>
            Gets an indication of whether the asynchronous operation completed synchronously.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadToTerminatorAsyncOperation.IsCompleted">
            <summary>
            Gets an indication whether the asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadToTerminatorAsyncOperation.IsEndCalled">
            <summary>
            Gets or sets if <b>EndReadLine</b> method is called for this asynchronous operation.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadToTerminatorAsyncOperation.BytesStored">
            <summary>
            Gets number of bytes stored in to <b>storeStream</b>.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadToTerminatorAsyncOperation.Exception">
            <summary>
            Gets exception happened on asynchronous operation. Returns null if operation was successfull.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IO.SmartStream.ReadToStreamAsyncOperation">
            <summary>
            This class implements asynchronous read to stream data reader.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadToStreamAsyncOperation.#ctor(LumiSoft.Net.IO.SmartStream,System.IO.Stream,System.Int64,System.AsyncCallback,System.Object)">
            <summary>
            Default constructor.
            </summary>
            <param name="owner">Owner stream.</param>
            <param name="storeStream">Stream where to store readed data.</param>
            <param name="count">Number of bytes to read from source stream.</param>
            <param name="callback">The AsyncCallback delegate that is executed when asynchronous operation completes.</param>
            <param name="asyncState">User-defined object that qualifies or contains information about an asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b> or <b>storeStream</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadToStreamAsyncOperation.Buffering_Completed(System.Exception)">
            <summary>
            Is called when asynchronous read buffer buffering has completed.
            </summary>
            <param name="x">Exception that occured during async operation.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadToStreamAsyncOperation.DoDataReading">
            <summary>
            Does data reading.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadToStreamAsyncOperation.Completed">
            <summary>
            This method must be called when asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadToStreamAsyncOperation.AsyncState">
            <summary>
            Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadToStreamAsyncOperation.AsyncWaitHandle">
            <summary>
            Gets a WaitHandle that is used to wait for an asynchronous operation to complete.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadToStreamAsyncOperation.CompletedSynchronously">
            <summary>
            Gets an indication of whether the asynchronous operation completed synchronously.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadToStreamAsyncOperation.IsCompleted">
            <summary>
            Gets an indication whether the asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadToStreamAsyncOperation.IsEndCalled">
            <summary>
            Gets or sets if <b>EndReadLine</b> method is called for this asynchronous operation.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadToStreamAsyncOperation.BytesStored">
            <summary>
            Gets number of bytes stored in to <b>storeStream</b>.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadToStreamAsyncOperation.Exception">
            <summary>
            Gets exception happened on asynchronous operation. Returns null if operation was successfull.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IO.SmartStream.ReadAsyncOperation">
            <summary>
            This class implements asynchronous data reader.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadAsyncOperation.#ctor(LumiSoft.Net.IO.SmartStream,System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Default constructor.
            </summary>
            <param name="owner">Owner stream.</param>
            <param name="buffer">Buffer where to store data.</param>
            <param name="offset">The location in <b>buffer</b> to begin storing the data.</param>
            <param name="maxSize">Maximum number of bytes to read.</param>
            <param name="callback">The AsyncCallback delegate that is executed when asynchronous operation completes.</param>
            <param name="asyncState">User-defined object that qualifies or contains information about an asynchronous operation.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadAsyncOperation.Buffering_Completed(System.Exception)">
            <summary>
            Is called when asynchronous read buffer buffering has completed.
            </summary>
            <param name="x">Exception that occured during async operation.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadAsyncOperation.DoRead">
            <summary>
            Does asynchronous data reading.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadAsyncOperation.Completed">
            <summary>
            This method must be called when asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadAsyncOperation.AsyncState">
            <summary>
            Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadAsyncOperation.AsyncWaitHandle">
            <summary>
            Gets a WaitHandle that is used to wait for an asynchronous operation to complete.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadAsyncOperation.CompletedSynchronously">
            <summary>
            Gets an indication of whether the asynchronous operation completed synchronously.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadAsyncOperation.IsCompleted">
            <summary>
            Gets an indication whether the asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadAsyncOperation.IsEndCalled">
            <summary>
            Gets or sets if <b>EndReadLine</b> method is called for this asynchronous operation.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadAsyncOperation.Buffer">
            <summary>
            Gets store buffer.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadAsyncOperation.BytesStored">
            <summary>
            Gets number of bytes stored in to <b>Buffer</b>.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Log.WriteLogEventArgs">
            <summary>
            This class provides data for <b>Logger.WriteLog</b> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Log.WriteLogEventArgs.#ctor(LumiSoft.Net.Log.LogEntry)">
            <summary>
            Default constructor.
            </summary>
            <param name="logEntry">New log entry.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>logEntry</b> is null.</exception>
        </member>
        <member name="P:LumiSoft.Net.Log.WriteLogEventArgs.LogEntry">
            <summary>
            Gets new log entry.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Net_Utils">
            <summary>
            Common utility methods.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Net_Utils.GetLocalHostName(System.String)">
            <summary>
            Gets local host name or argument <b>hostName</b> value if it's specified.
            </summary>
            <param name="hostName">Host name or null.</param>
            <returns>Returns local host name or argument <b>hostName</b> value if it's specified.</returns>
        </member>
        <member name="M:LumiSoft.Net.Net_Utils.CompareArray(System.Array,System.Array)">
            <summary>
            Compares if specified array itmes equals.
            </summary>
            <param name="array1">Array 1.</param>
            <param name="array2">Array 2</param>
            <returns>Returns true if both arrays are equal.</returns>
        </member>
        <member name="M:LumiSoft.Net.Net_Utils.CompareArray(System.Array,System.Array,System.Int32)">
            <summary>
            Compares if specified array itmes equals.
            </summary>
            <param name="array1">Array 1.</param>
            <param name="array2">Array 2</param>
            <param name="array2Count">Number of bytes in array 2 used for compare.</param>
            <returns>Returns true if both arrays are equal.</returns>
        </member>
        <member name="M:LumiSoft.Net.Net_Utils.ReverseArray(System.Array)">
            <summary>
            Reverses the specified array elements.
            </summary>
            <param name="array">Array elements to reverse.</param>
            <returns>Returns array with reversed items.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>array</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.Net_Utils.ArrayToString(System.String[],System.String)">
            <summary>
            Convert array elements to string.
            </summary>
            <param name="values">String values.</param>
            <param name="delimiter">Values delimiter.</param>
            <returns>Returns array elements as string.</returns>
        </member>
        <member name="M:LumiSoft.Net.Net_Utils.StreamCopy(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            Copies <b>source</b> stream data to <b>target</b> stream.
            </summary>
            <param name="source">Source stream. Reading starts from stream current position.</param>
            <param name="target">Target stream. Writing starts from stream current position.</param>
            <param name="blockSize">Specifies transfer block size in bytes.</param>
            <returns>Returns number of bytes copied.</returns>
        </member>
        <member name="M:LumiSoft.Net.Net_Utils.CompareIP(System.Net.IPAddress,System.Net.IPAddress)">
            <summary>
            Compares 2 IP addresses. Returns 0 if IPs are equal, 
            returns positive value if destination IP is bigger than source IP,
            returns negative value if destination IP is smaller than source IP.
            </summary>
            <param name="source">Source IP address.</param>
            <param name="destination">Destination IP address.</param>
            <returns>Returns 0 if IPs are equal, 
            returns positive value if destination IP is bigger than source IP,
            returns negative value if destination IP is smaller than source IP.
            </returns>
        </member>
        <member name="M:LumiSoft.Net.Net_Utils.IsIPAddress(System.String)">
            <summary>
            Gets if the specified string value is IP address.
            </summary>
            <param name="value">Value to check.</param>
            <returns>Returns true if specified value is IP address.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.Net_Utils.IsMulticastAddress(System.Net.IPAddress)">
            <summary>
            Gets if the specified IP address is multicast address.
            </summary>
            <param name="ip">IP address.</param>
            <returns>Returns true if <b>ip</b> is muticast address, otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>ip</b> s null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.Net_Utils.IsPrivateIP(System.String)">
            <summary>
            Gets if specified IP address is private LAN IP address. For example 192.168.x.x is private ip.
            </summary>
            <param name="ip">IP address to check.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>ip</b> is null reference.</exception>
            <returns>Returns true if IP is private IP.</returns>
        </member>
        <member name="M:LumiSoft.Net.Net_Utils.IsPrivateIP(System.Net.IPAddress)">
            <summary>
            Gets if specified IP address is private LAN IP address. For example 192.168.x.x is private ip.
            </summary>
            <param name="ip">IP address to check.</param>
            <returns>Returns true if IP is private IP.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>ip</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.Net_Utils.ParseIPEndPoint(System.String)">
            <summary>
            Parses IPEndPoint from the specified string value.
            </summary>
            <param name="value">IPEndPoint string value.</param>
            <returns>Returns parsed IPEndPoint.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.Net_Utils.IsInteger(System.String)">
            <summary>
            Checks if specified string is integer(int/long).
            </summary>
            <param name="value"></param>
            <returns>Returns true if specified string is integer.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.Net_Utils.IsAscii(System.String)">
            <summary>
            Gets if the specified string is ASCII string.
            </summary>
            <param name="value">String value.</param>
            <returns>Returns true if specified string is ASCII string, otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.Net_Utils.IsSocketAsyncSupported">
            <summary>
            Gets if socket async methods supported by OS.
            </summary>
            <returns>returns ture if supported, otherwise false.</returns>
        </member>
        <member name="M:LumiSoft.Net.Net_Utils.CreateSocket(System.Net.IPEndPoint,System.Net.Sockets.ProtocolType)">
            <summary>
            Creates new socket for the specified end point.
            </summary>
            <param name="localEP">Local end point.</param>
            <param name="protocolType">Protocol type.</param>
            <returns>Retruns newly created socket.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>localEP</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.Net_Utils.ToHex(System.Byte[])">
            <summary>
            Converts specified data to HEX string.
            </summary>
            <param name="data">Data to convert.</param>
            <returns>Returns hex string.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>data</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.Net_Utils.ToHex(System.String)">
            <summary>
            Converts specified string to HEX string.
            </summary>
            <param name="text">String to convert.</param>
            <returns>Returns hex string.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>text</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.Net_Utils.FromHex(System.Byte[])">
            <summary>
            Converts hex byte data to normal byte data. Hex data must be in two bytes pairs, for example: 0F,FF,A3,... .
            </summary>
            <param name="hexData">Hex data.</param>
            <returns>Returns decoded data.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>hexData</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.Net_Utils.FromBase64(System.String)">
            <summary>
            Decodes specified base64 data.
            </summary>
            <param name="data">Base64 string.</param>
            <returns>Returns decoded data.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>data</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.Net_Utils.FromBase64(System.Byte[])">
            <summary>
            Decodes specified base64 data.
            </summary>
            <param name="data">Base64 data.</param>
            <returns>Returns decoded data.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>data</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.Net_Utils.Base64Encode(System.Byte[])">
            <summary>
            Encodes specified data with base64 encoding.
            </summary>
            <param name="data">Data to encode.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Net_Utils.Base64EncodeEx(System.Byte[],System.Char[],System.Boolean)">
            <summary>
            Encodes specified data with bas64 encoding.
            </summary>
            <param name="data">Data to to encode.</param>
            <param name="base64Chars">Custom base64 chars (64 chars) or null if default chars used.</param>
            <param name="padd">Padd missing block chars. Normal base64 must be 4 bytes blocks, if not 4 bytes in block, 
            missing bytes must be padded with '='. Modified base64 just skips missing bytes.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Net_Utils.Base64DecodeEx(System.Byte[],System.Char[])">
            <summary>
            Decodes base64 data. Defined in RFC 2045 6.8.  Base64 Content-Transfer-Encoding.
            </summary>
            <param name="base64Data">Base64 decoded data.</param>
            <param name="base64Chars">Custom base64 chars (64 chars) or null if default chars used.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Net_Utils.ComputeMd5(System.String,System.Boolean)">
            <summary>
            Computes md5 hash.
            </summary>
            <param name="text">Text to hash.</param>
            <param name="hex">Specifies if md5 value is returned as hex string.</param>
            <returns>Returns md5 value or md5 hex value.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>text</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.Net_Utils.IsIoCompletionPortsSupported">
            <summary>
            Gets if IO completion ports supported by OS.
            </summary>
            <returns></returns>
        </member>
        <member name="T:LumiSoft.Net.PortRange">
            <summary>
            This class holds UDP or TCP port range.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.PortRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="start">Start port.</param>
            <param name="end">End port.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when any of the aruments value is out of range.</exception>
        </member>
        <member name="P:LumiSoft.Net.PortRange.Start">
            <summary>
            Gets start port.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.PortRange.End">
            <summary>
            Gets end port.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SslMode">
            <summary>
            This enum holds SSL modes.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SslMode.None">
            <summary>
            No SSL is used.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SslMode.SSL">
            <summary>
            Connection is SSL.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SslMode.TLS">
            <summary>
            Connection will be switched to SSL with start TLS.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.TCP.TCP_Session">
            <summary>
            This is base class for TCP_Client and TCP_ServerSession.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Session.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Session.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Session.Disconnect">
            <summary>
            Disconnects session.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Session.IsConnected">
            <summary>
            Gets if session is connected.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Session.ID">
            <summary>
            Gets session ID.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Session.ConnectTime">
            <summary>
            Gets the time when session was connected.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Session.LastActivity">
            <summary>
            Gets the last time when data was sent or received.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Session.LocalEndPoint">
            <summary>
            Gets session local IP end point.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Session.RemoteEndPoint">
            <summary>
            Gets session remote IP end point.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Session.IsSecureConnection">
            <summary>
            Gets if this session TCP connection is secure connection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Session.IsAuthenticated">
            <summary>
            Gets if this session is authenticated.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Session.AuthenticatedUserIdentity">
            <summary>
            Gets session authenticated user identity , returns null if not authenticated.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Session.TcpStream">
            <summary>
            Gets TCP stream which must be used to send/receive data through this session.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.TCP.TCP_Client">
            <summary>
            This class implements generic TCP client.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.Dispose">
            <summary>
            Cleans up any resources being used. This method is thread-safe.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.Connect(System.String,System.Int32)">
            <summary>
            Connects to the specified host. If the hostname resolves to more than one IP address, 
            all IP addresses will be tried for connection, until one of them connects.
            </summary>
            <param name="host">Host name or IP address.</param>
            <param name="port">Port to connect.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is already connected.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.Connect(System.String,System.Int32,System.Boolean)">
            <summary>
            Connects to the specified host. If the hostname resolves to more than one IP address, 
            all IP addresses will be tried for connection, until one of them connects.
            </summary>
            <param name="host">Host name or IP address.</param>
            <param name="port">Port to connect.</param>
            <param name="ssl">Specifies if connects to SSL end point.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is already connected.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.Connect(System.Net.IPEndPoint,System.Boolean)">
            <summary>
            Connects to the specified remote end point.
            </summary>
            <param name="remoteEP">Remote IP end point where to connect.</param>
            <param name="ssl">Specifies if connects to SSL end point.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is already connected.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>remoteEP</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.Connect(System.Net.IPEndPoint,System.Net.IPEndPoint,System.Boolean)">
            <summary>
            Connects to the specified remote end point.
            </summary>
            <param name="localEP">Local IP end point to use. Value null means that system will allocate it.</param>
            <param name="remoteEP">Remote IP end point to connect.</param>
            <param name="ssl">Specifies if connection switches to SSL affter connect.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is already connected.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>remoteEP</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.Connect(System.Net.IPEndPoint,System.Net.IPEndPoint,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback)">
            <summary>
            Connects to the specified remote end point.
            </summary>
            <param name="localEP">Local IP end point to use. Value null means that system will allocate it.</param>
            <param name="remoteEP">Remote IP end point to connect.</param>
            <param name="ssl">Specifies if connection switches to SSL affter connect.</param>
            <param name="certCallback">SSL server certificate validation callback. Value null means any certificate is accepted.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is already connected.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>remoteEP</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.ConnectAsync(LumiSoft.Net.TCP.TCP_Client.ConnectAsyncOP)">
            <summary>
            Starts connecting to remote end point.
            </summary>
            <param name="op">Asynchronous operation.</param>
            <returns>Returns true if aynchronous operation is pending (The <see cref="E:LumiSoft.Net.TCP.TCP_Client.ConnectAsyncOP.CompletedAsync"/> event is raised upon completion of the operation).
            Returns false if operation completed synchronously.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.Disconnect">
            <summary>
            Disconnects connection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is not connected.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.BeginDisconnect(System.AsyncCallback,System.Object)">
            <summary>
            Starts disconnecting connection.
            </summary>
            <param name="callback">Callback to call when the asynchronous operation is complete.</param>
            <param name="state">User data.</param>
            <returns>An IAsyncResult that references the asynchronous disconnect.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is not connected.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.EndDisconnect(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous disconnect request.
            </summary>
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>asyncResult</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when argument <b>asyncResult</b> was not returned by a call to the <b>BeginDisconnect</b> method.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when <b>EndDisconnect</b> was previously called for the asynchronous connection.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.SwitchToSecure">
            <summary>
            Switches session to secure connection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is not connected or is already secure.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.SwitchToSecureAsync(LumiSoft.Net.TCP.TCP_Client.SwitchToSecureAsyncOP)">
            <summary>
            Starts switching connection to secure.
            </summary>
            <param name="op">Asynchronous operation.</param>
            <returns>Returns true if aynchronous operation is pending (The <see cref="E:LumiSoft.Net.TCP.TCP_Client.SwitchToSecureAsyncOP.CompletedAsync"/> event is raised upon completion of the operation).
            Returns false if operation completed synchronously.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is not connected or connection is already secure.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.OnConnected">
            <summary>
            This method is called after TCP client has sucessfully connected.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.OnConnected(LumiSoft.Net.TCP.TCP_Client.CompleteConnectCallback)">
            <summary>
            This method is called when TCP client has sucessfully connected.
            </summary>
            <param name="callback">Callback to be called to complete connect operation.</param>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.ReadLine">
            <summary>
            Reads and logs specified line from connected host.
            </summary>
            <returns>Returns readed line.</returns>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.WriteLine(System.String)">
            <summary>
            Sends and logs specified line to connected host.
            </summary>
            <param name="line">Line to send.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>line</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.LogAddRead(System.Int64,System.String)">
            <summary>
            Logs read operation.
            </summary>
            <param name="size">Number of bytes readed.</param>
            <param name="text">Log text.</param>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.LogAddWrite(System.Int64,System.String)">
            <summary>
            Logs write operation.
            </summary>
            <param name="size">Number of bytes written.</param>
            <param name="text">Log text.</param>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.LogAddText(System.String)">
            <summary>
            Logs free text entry.
            </summary>
            <param name="text">Log text.</param>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.LogAddException(System.String,System.Exception)">
            <summary>
            Logs exception.
            </summary>
            <param name="text">Log text.</param>
            <param name="x">Exception happened.</param>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.BeginConnect(System.String,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Starts connection to the specified host.
            </summary>
            <param name="host">Host name or IP address.</param>
            <param name="port">Port to connect.</param>
            <param name="callback">Callback to call when the connect operation is complete.</param>
            <param name="state">User data.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is already connected.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.BeginConnect(System.String,System.Int32,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Starts connection to the specified host.
            </summary>
            <param name="host">Host name or IP address.</param>
            <param name="port">Port to connect.</param>
            <param name="ssl">Specifies if connects to SSL end point.</param>
            <param name="callback">Callback to call when the connect operation is complete.</param>
            <param name="state">User data.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is already connected.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.BeginConnect(System.Net.IPEndPoint,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Starts connection to the specified remote end point.
            </summary>
            <param name="remoteEP">Remote IP end point where to connect.</param>
            <param name="ssl">Specifies if connects to SSL end point.</param>
            <param name="callback">Callback to call when the connect operation is complete.</param>
            <param name="state">User data.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is already connected.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>remoteEP</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.BeginConnect(System.Net.IPEndPoint,System.Net.IPEndPoint,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Starts connection to the specified remote end point.
            </summary>
            <param name="localEP">Local IP end point to use for connect.</param>
            <param name="remoteEP">Remote IP end point where to connect.</param>
            <param name="ssl">Specifies if connects to SSL end point.</param>
            <param name="callback">Callback to call when the connect operation is complete.</param>
            <param name="state">User data.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is already connected.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>remoteEP</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.EndConnect(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous connection request.
            </summary>
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>asyncResult</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when argument <b>asyncResult</b> was not returned by a call to the <b>BeginConnect</b> method.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when <b>EndConnect</b> was previously called for the asynchronous connection.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.OnError(System.Exception)">
            <summary>
            This must be called when unexpected error happens. When inheriting <b>TCP_Client</b> class, be sure that you call <b>OnError</b>
            method for each unexpected error.
            </summary>
            <param name="x">Exception happened.</param>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Client.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Client.Logger">
            <summary>
            Gets or sets TCP client logger. Value null means no logging.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Client.IsConnected">
            <summary>
            Gets if TCP client is connected.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Client.ID">
            <summary>
            Gets session ID.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is not connected.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Client.ConnectTime">
            <summary>
            Gets the time when session was connected.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is not connected.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Client.LastActivity">
            <summary>
            Gets the last time when data was sent or received.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is not connected.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Client.LocalEndPoint">
            <summary>
            Gets session local IP end point.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is not connected.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Client.RemoteEndPoint">
            <summary>
            Gets session remote IP end point.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is not connected.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Client.IsSecureConnection">
            <summary>
            Gets if this session TCP connection is secure connection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is not connected.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Client.TcpStream">
            <summary>
            Gets TCP stream which must be used to send/receive data through this session.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is not connected.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Client.ValidateCertificateCallback">
            <summary>
            Gets or stes remote callback which is called when remote server certificate needs to be validated.
            Value null means not sepcified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Client.Timeout">
            <summary>
            Gets or sets default TCP read/write timeout.
            </summary>
            <remarks>This timeout applies only synchronous TCP read/write operations.</remarks>
        </member>
        <member name="T:LumiSoft.Net.TCP.TCP_Client.ConnectAsyncOP">
            <summary>
            This class represents <see cref="M:LumiSoft.Net.TCP.TCP_Client.ConnectAsync(LumiSoft.Net.TCP.TCP_Client.ConnectAsyncOP)"/> asynchronous operation.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.ConnectAsyncOP.#ctor(System.Net.IPEndPoint,System.Net.IPEndPoint,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback)">
            <summary>
            Default constructor.
            </summary>
            <param name="localEP">Local IP end point to use. Value null means that system will allocate it.</param>
            <param name="remoteEP">Remote IP end point to connect.</param>
            <param name="ssl">Specifies if connection switches to SSL affter connect.</param>
            <param name="certCallback">SSL server certificate validation callback. Value null means any certificate is accepted.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>remoteEP</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.ConnectAsyncOP.Dispose">
            <summary>
            Cleans up any resource being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.ConnectAsyncOP.Start(LumiSoft.Net.TCP.TCP_Client)">
            <summary>
            Starts operation processing.
            </summary>
            <param name="owner">Owner TCP client.</param>
            <returns>Returns true if asynchronous operation in progress or false if operation completed synchronously.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.ConnectAsyncOP.SetState(LumiSoft.Net.AsyncOP_State)">
            <summary>
            Sets operation state.
            </summary>
            <param name="state">New state.</param>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.ConnectAsyncOP.BeginConnectCompleted(System.IAsyncResult)">
            <summary>
            This method is called when "BeginConnect" has completed.
            </summary>
            <param name="ar">Asynchronous result.</param>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.ConnectAsyncOP.BeginAuthenticateAsClientCompleted(System.IAsyncResult)">
            <summary>
            This method is called when "BeginAuthenticateAsClient" has completed.
            </summary>
            <param name="ar">Asynchronous result.</param>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.ConnectAsyncOP.RemoteCertificateValidationCallback(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            This method is called when we need to validate remote server certificate.
            </summary>
            <param name="sender">Sender.</param>
            <param name="certificate">Certificate.</param>
            <param name="chain">Certificate chain.</param>
            <param name="sslPolicyErrors">SSL policy errors.</param>
            <returns>Returns true if certificate validated, otherwise false.</returns>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.ConnectAsyncOP.CleanupSocketRelated">
            <summary>
            Cleans up any socket related resources.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.ConnectAsyncOP.InternalConnectCompleted">
            <summary>
            Is called when when connecting has finished.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.ConnectAsyncOP.CompleteConnectCallback(System.Exception)">
            <summary>
            This method is called when this derrived class OnConnected processing has completed.
            </summary>
            <param name="error">Exception happened or null if no errors.</param>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.ConnectAsyncOP.OnCompletedAsync">
            <summary>
            Raises <b>CompletedAsync</b> event.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Client.ConnectAsyncOP.State">
            <summary>
            Gets asynchronous operation state.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Client.ConnectAsyncOP.Error">
            <summary>
            Gets error happened during operation. Returns null if no error.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed other than <b>AsyncOP_State.Completed</b> state.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Client.ConnectAsyncOP.Socket">
            <summary>
            Gets connected socket.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed other than <b>AsyncOP_State.Completed</b> state.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Client.ConnectAsyncOP.Stream">
            <summary>
            Gets connected TCP stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed other than <b>AsyncOP_State.Completed</b> state.</exception>
        </member>
        <member name="E:LumiSoft.Net.TCP.TCP_Client.ConnectAsyncOP.CompletedAsync">
            <summary>
            Is called when asynchronous operation has completed.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.TCP.TCP_Client.DisconnectDelegate">
            <summary>
            Internal helper method for asynchronous Disconnect method.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.TCP.TCP_Client.SwitchToSecureAsyncOP">
            <summary>
            This class represents <see cref="M:LumiSoft.Net.TCP.TCP_Client.SwitchToSecureAsync(LumiSoft.Net.TCP.TCP_Client.SwitchToSecureAsyncOP)"/> asynchronous operation.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.SwitchToSecureAsyncOP.#ctor(System.Net.Security.RemoteCertificateValidationCallback)">
            <summary>
            Default constructor.
            </summary>
            <param name="certCallback">SSL server certificate validation callback. Value null means any certificate is accepted.</param>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.SwitchToSecureAsyncOP.Dispose">
            <summary>
            Cleans up any resource being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.SwitchToSecureAsyncOP.Start(LumiSoft.Net.TCP.TCP_Client)">
            <summary>
            Starts operation processing.
            </summary>
            <param name="owner">Owner TCP client.</param>
            <returns>Returns true if asynchronous operation in progress or false if operation completed synchronously.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.SwitchToSecureAsyncOP.SetState(LumiSoft.Net.AsyncOP_State)">
            <summary>
            Sets operation state.
            </summary>
            <param name="state">New state.</param>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.SwitchToSecureAsyncOP.RemoteCertificateValidationCallback(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            This method is called when we need to validate remote server certificate.
            </summary>
            <param name="sender">Sender.</param>
            <param name="certificate">Certificate.</param>
            <param name="chain">Certificate chain.</param>
            <param name="sslPolicyErrors">SSL policy errors.</param>
            <returns>Returns true if certificate validated, otherwise false.</returns>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.SwitchToSecureAsyncOP.BeginAuthenticateAsClientCompleted(System.IAsyncResult)">
            <summary>
            This method is called when "BeginAuthenticateAsClient" has completed.
            </summary>
            <param name="ar">Asynchronous result.</param>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.SwitchToSecureAsyncOP.OnCompletedAsync">
            <summary>
            Raises <b>CompletedAsync</b> event.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Client.SwitchToSecureAsyncOP.State">
            <summary>
            Gets asynchronous operation state.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Client.SwitchToSecureAsyncOP.Error">
            <summary>
            Gets error happened during operation. Returns null if no error.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed other than <b>AsyncOP_State.Completed</b> state.</exception>
        </member>
        <member name="E:LumiSoft.Net.TCP.TCP_Client.SwitchToSecureAsyncOP.CompletedAsync">
            <summary>
            Is called when asynchronous operation has completed.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.TCP.TCP_Client.CompleteConnectCallback">
            <summary>
            Represents callback to be called when to complete connect operation.
            </summary>
            <param name="error">Exception happened or null if no errors.</param>
        </member>
        <member name="T:LumiSoft.Net.TCP.TCP_Client.BeginConnectHostDelegate">
            <summary>
            Internal helper method for asynchronous Connect method.
            </summary>
            <param name="host">Host name or IP address.</param>
            <param name="port">Port to connect.</param>
            <param name="ssl">Specifies if connects to SSL end point.</param>
        </member>
        <member name="T:LumiSoft.Net.TCP.TCP_Client.BeginConnectEPDelegate">
            <summary>
            Internal helper method for asynchronous Connect method.
            </summary>
            <param name="localEP">Local IP end point to use for connect.</param>
            <param name="remoteEP">Remote IP end point where to connect.</param>
            <param name="ssl">Specifies if connects to SSL end point.</param>
        </member>
        <member name="T:LumiSoft.Net.TCP.TCP_Server`1">
            <summary>
            This class implements generic TCP session based server.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Server`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Server`1.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Server`1.m_pTimer_IdleTimeout_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Is called when session idle check timer triggered.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Server`1.Start">
            <summary>
            Starts TCP server.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Server`1.Stop">
            <summary>
            Stops TCP server, all active connections will be terminated.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Server`1.Restart">
            <summary>
            Restarts TCP server.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Server`1.OnMaxConnectionsExceeded(`0)">
            <summary>
            Is called when new incoming session and server maximum allowed connections exceeded.
            </summary>
            <param name="session">Incoming session.</param>
            <remarks>This method allows inhereted classes to report error message to connected client.
            Session will be disconnected after this method completes.
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Server`1.OnMaxConnectionsPerIPExceeded(`0)">
            <summary>
            Is called when new incoming session and server maximum allowed connections per connected IP exceeded.
            </summary>
            <param name="session">Incoming session.</param>
            <remarks>This method allows inhereted classes to report error message to connected client.
            Session will be disconnected after this method completes.
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Server`1.StartListen">
            <summary>
            Starts listening incoming connections. NOTE: All active listening points will be disposed.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Server`1.ProcessConnection(System.Net.Sockets.Socket,LumiSoft.Net.IPBindInfo)">
            <summary>
            Processes specified connection.
            </summary>
            <param name="socket">Accpeted socket.</param>
            <param name="bindInfo">Local bind info what accpeted connection.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>socket</b> or <b>bindInfo</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Server`1.OnStarted">
            <summary>
            Raises <b>Started</b> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Server`1.OnStopped">
            <summary>
            Raises <b>Stopped</b> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Server`1.OnDisposed">
            <summary>
            Raises <b>Disposed</b> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Server`1.OnSessionCreated(`0)">
            <summary>
            Raises <b>SessionCreated</b> event.
            </summary>
            <param name="session">TCP server session that was created.</param>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Server`1.OnError(System.Exception)">
            <summary>
            Raises <b>Error</b> event.
            </summary>
            <param name="x">Exception happened.</param>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Server`1.IsDisposed">
            <summary>
            Gets if server is disposed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Server`1.IsRunning">
            <summary>
            Gets if server is running.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Server`1.Bindings">
            <summary>
            Gets or sets TCP server IP bindings.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Server`1.LocalEndPoints">
            <summary>
            Gets local listening IP end points.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Server`1.MaxConnections">
            <summary>
            Gets or sets maximum allowed concurent connections. Value 0 means unlimited.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.ArgumentException">Is raised when negative value is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Server`1.MaxConnectionsPerIP">
            <summary>
            Gets or sets maximum allowed connections for 1 IP address. Value 0 means unlimited.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Server`1.SessionIdleTimeout">
            <summary>
            Gets or sets maximum allowed session idle time in seconds, after what session will be terminated. Value 0 means unlimited,
            but this is strongly not recommened.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.ArgumentException">Is raised when negative value is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Server`1.Logger">
            <summary>
            Gets or sets logger. Value null means no logging.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Server`1.StartTime">
            <summary>
            Gets the time when server was started.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP server is not running and this property is accesed.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Server`1.ConnectionsProcessed">
            <summary>
            Gets how many connections this TCP server has processed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP server is not running and this property is accesed.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Server`1.Sessions">
            <summary>
            Gets TCP server active sessions.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP server is not running and this property is accesed.</exception>
        </member>
        <member name="E:LumiSoft.Net.TCP.TCP_Server`1.Started">
            <summary>
            This event is raised when TCP server has started.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.TCP.TCP_Server`1.Stopped">
            <summary>
            This event is raised when TCP server has stopped.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.TCP.TCP_Server`1.Disposed">
            <summary>
            This event is raised when TCP server has disposed.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.TCP.TCP_Server`1.SessionCreated">
            <summary>
            This event is raised when TCP server creates new session.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.TCP.TCP_Server`1.Error">
            <summary>
            This event is raised when TCP server has unknown unhandled error.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.TCP.TCP_Server`1.ListeningPoint">
            <summary>
            This class holds listening point info.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Server`1.ListeningPoint.#ctor(System.Net.Sockets.Socket,LumiSoft.Net.IPBindInfo)">
            <summary>
            Default constructor.
            </summary>
            <param name="socket">Listening socket.</param>
            <param name="bind">Bind info what acceped socket.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>socket</b> or <b>bind</b> is null reference.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Server`1.ListeningPoint.Socket">
            <summary>
            Gets socket.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Server`1.ListeningPoint.BindInfo">
            <summary>
            Gets bind info.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.TCP.TCP_Server`1.TCP_Acceptor">
            <summary>
            Implements single TCP connection acceptor.
            </summary>
            <remarks>For higher performance, mutiple acceptors per socket must be created.</remarks>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Server`1.TCP_Acceptor.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Default constructor.
            </summary>
            <param name="socket">Socket.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>socket</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Server`1.TCP_Acceptor.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Server`1.TCP_Acceptor.Start">
            <summary>
            Starts accpeting connections.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this calss is disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Server`1.TCP_Acceptor.IOCompletionAccept">
            <summary>
            Accpets connection synchornously(if connection(s) available now) or starts waiting TCP connection asynchronously if no connections at moment.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Server`1.TCP_Acceptor.AsyncSocketAccept(System.IAsyncResult)">
            <summary>
            Is called BeginAccept has completed.
            </summary>
            <param name="ar">The result of the asynchronous operation.</param>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Server`1.TCP_Acceptor.OnConnectionAccepted(System.Net.Sockets.Socket)">
            <summary>
            Raises <b>ConnectionAccepted</b> event.
            </summary>
            <param name="socket">Accepted socket.</param>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Server`1.TCP_Acceptor.OnError(System.Exception)">
            <summary>
            Raises <b>Error</b> event.
            </summary>
            <param name="x">Exception happened.</param>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Server`1.TCP_Acceptor.Tags">
            <summary>
            Gets user data items.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.TCP.TCP_Server`1.TCP_Acceptor.ConnectionAccepted">
            <summary>
            Is raised when new TCP connection was accepted.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.TCP.TCP_Server`1.TCP_Acceptor.Error">
            <summary>
            Is raised when unhandled error happens.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.TCP.TCP_ServerSession">
            <summary>
            This class implements generic TCP server session.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_ServerSession.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_ServerSession.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_ServerSession.Init(System.Object,System.Net.Sockets.Socket,System.String,System.Boolean,System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            Initializes session. This method is called from TCP_Server when new session created.
            </summary>
            <param name="server">Owner TCP server.</param>
            <param name="socket">Connected socket.</param>
            <param name="hostName">Local host name.</param>
            <param name="ssl">Specifies if session should switch to SSL.</param>
            <param name="certificate">SSL certificate.</param>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_ServerSession.StartI">
            <summary>
            This method is called from TCP server when session should start processing incoming connection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_ServerSession.Start">
            <summary>
            This method is called from TCP server when session should start processing incoming connection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_ServerSession.SwitchToSecure">
            <summary>
            Switches session to secure connection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when connection is already secure or when SSL certificate is not specified.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_ServerSession.SwitchToSecureAsync(LumiSoft.Net.TCP.TCP_ServerSession.SwitchToSecureAsyncOP)">
            <summary>
            Starts switching connection to secure.
            </summary>
            <param name="op">Asynchronous operation.</param>
            <returns>Returns true if aynchronous operation is pending (The <see cref="E:LumiSoft.Net.TCP.TCP_ServerSession.SwitchToSecureAsyncOP.CompletedAsync"/> event is raised upon completion of the operation).
            Returns false if operation completed synchronously.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when connection is already secure or when SSL certificate is not specified.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_ServerSession.Disconnect">
            <summary>
            Disconnects session.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_ServerSession.Disconnect(System.String)">
            <summary>
            Disconnects session.
            </summary>
            <param name="text">Text what is sent to connected host before disconnecting.</param>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_ServerSession.OnTimeout">
            <summary>
            This method is called when specified session times out.
            </summary>
            <remarks>
            This method allows inhereted classes to report error message to connected client.
            Session will be disconnected after this method completes.
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_ServerSession.OnTimeoutI">
            <summary>
            Just calls <b>OnTimeout</b> method.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_ServerSession.LogAddText(System.String)">
            <summary>
            Logs specified text.
            </summary>
            <param name="text">text to log.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>text</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_ServerSession.LogAddException(System.Exception)">
            <summary>
            Logs specified exception.
            </summary>
            <param name="exception">Exception to log.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>exception</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_ServerSession.OnIdleTimeout">
            <summary>
            Raises <b>IdleTimeout</b> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_ServerSession.OnDisonnected">
            <summary>
            Raises <b>Disonnected</b> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_ServerSession.OnDisposed">
            <summary>
            Raises <b>Disposed</b> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_ServerSession.OnError(System.Exception)">
            <summary>
            Raises <b>Error</b> event.
            </summary>
            <param name="x">Exception happened.</param>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_ServerSession.IsDisposed">
            <summary>
            Gets if TCP server session is disposed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_ServerSession.Server">
            <summary>
            Gets owner TCP server.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_ServerSession.LocalHostName">
            <summary>
            Gets local host name.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_ServerSession.Certificate">
            <summary>
            Gets session certificate.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_ServerSession.Tag">
            <summary>
            Gets or sets user data.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_ServerSession.Tags">
            <summary>
            Gets user data items collection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_ServerSession.IsConnected">
            <summary>
            Gets if session is connected.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_ServerSession.ID">
            <summary>
            Gets session ID.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_ServerSession.ConnectTime">
            <summary>
            Gets the time when session was connected.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_ServerSession.LastActivity">
            <summary>
            Gets the last time when data was sent or received.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_ServerSession.LocalEndPoint">
            <summary>
            Gets session local IP end point.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_ServerSession.RemoteEndPoint">
            <summary>
            Gets session remote IP end point.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_ServerSession.IsSecureConnection">
            <summary>
            Gets if this session TCP connection is secure connection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_ServerSession.TcpStream">
            <summary>
            Gets TCP stream which must be used to send/receive data through this session.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="E:LumiSoft.Net.TCP.TCP_ServerSession.IdleTimeout">
            <summary>
            This event is raised when session idle(no activity) timeout reached.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.TCP.TCP_ServerSession.Disonnected">
            <summary>
            This event is raised when session has disconnected and will be disposed soon.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.TCP.TCP_ServerSession.Disposed">
            <summary>
            This event is raised when session has disposed.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.TCP.TCP_ServerSession.Error">
            <summary>
            This event is raised when TCP server session has unknown unhandled error.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.TCP.TCP_ServerSession.SwitchToSecureAsyncOP">
            <summary>
            This class represents <see cref="M:LumiSoft.Net.TCP.TCP_ServerSession.SwitchToSecureAsync(LumiSoft.Net.TCP.TCP_ServerSession.SwitchToSecureAsyncOP)"/> asynchronous operation.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_ServerSession.SwitchToSecureAsyncOP.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_ServerSession.SwitchToSecureAsyncOP.Dispose">
            <summary>
            Cleans up any resource being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_ServerSession.SwitchToSecureAsyncOP.Start(LumiSoft.Net.TCP.TCP_ServerSession)">
            <summary>
            Starts operation processing.
            </summary>
            <param name="owner">Owner TCP session.</param>
            <returns>Returns true if asynchronous operation in progress or false if operation completed synchronously.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_ServerSession.SwitchToSecureAsyncOP.SetState(LumiSoft.Net.AsyncOP_State)">
            <summary>
            Sets operation state.
            </summary>
            <param name="state">New state.</param>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_ServerSession.SwitchToSecureAsyncOP.BeginAuthenticateAsServerCompleted(System.IAsyncResult)">
            <summary>
            This method is called when "BeginAuthenticateAsServer" has completed.
            </summary>
            <param name="ar">Asynchronous result.</param>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_ServerSession.SwitchToSecureAsyncOP.OnCompletedAsync">
            <summary>
            Raises <b>CompletedAsync</b> event.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_ServerSession.SwitchToSecureAsyncOP.State">
            <summary>
            Gets asynchronous operation state.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_ServerSession.SwitchToSecureAsyncOP.Error">
            <summary>
            Gets error happened during operation. Returns null if no error.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed other than <b>AsyncOP_State.Completed</b> state.</exception>
        </member>
        <member name="E:LumiSoft.Net.TCP.TCP_ServerSession.SwitchToSecureAsyncOP.CompletedAsync">
            <summary>
            Is called when asynchronous operation has completed.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.TCP.TCP_SessionCollection`1">
            <summary>
            This class implements TCP session collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_SessionCollection`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_SessionCollection`1.Add(`0)">
            <summary>
            Adds specified TCP session to the colletion.
            </summary>
            <param name="session">TCP server session to add.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>session</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_SessionCollection`1.Remove(`0)">
            <summary>
            Removes specified TCP server session from the collection.
            </summary>
            <param name="session">TCP server session to remove.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>session</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_SessionCollection`1.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_SessionCollection`1.ToArray">
            <summary>
            Copies all TCP server session to new array. This method is thread-safe.
            </summary>
            <returns>Returns TCP sessions array.</returns>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_SessionCollection`1.GetConnectionsPerIP(System.Net.IPAddress)">
            <summary>
            Gets number of connections per specified IP.
            </summary>
            <param name="ip">IP address.</param>
            <returns>Returns current number of connections of the specified IP.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>ip</b> is null reference.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_SessionCollection`1.Count">
            <summary>
            Gets number of items in the collection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_SessionCollection`1.Item(System.String)">
            <summary>
            Gets TCP session with the specified ID.
            </summary>
            <param name="id">Session ID.</param>
            <returns>Returns TCP session with the specified ID.</returns>
        </member>
        <member name="T:LumiSoft.Net.TCP.TCP_ServerSessionEventArgs`1">
            <summary>
            This class provides data to .... .
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_ServerSessionEventArgs`1.#ctor(LumiSoft.Net.TCP.TCP_Server{`0},`0)">
            <summary>
            Default constructor.
            </summary>
            <param name="server">TCP server.</param>
            <param name="session">TCP server session.</param>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_ServerSessionEventArgs`1.Server">
            <summary>
            Gets TCP server.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_ServerSessionEventArgs`1.Session">
            <summary>
            Gets TCP server session.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.TimerEx">
            <summary>
            Simple timer implementation.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TimerEx.#ctor">
            <summary>
            Default contructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TimerEx.#ctor(System.Double)">
            <summary>
            Default contructor.
            </summary>
            <param name="interval">The time in milliseconds between events.</param>
        </member>
        <member name="M:LumiSoft.Net.TimerEx.#ctor(System.Double,System.Boolean)">
            <summary>
            Default contructor.
            </summary>
            <param name="interval">The time in milliseconds between events.</param>
            <param name="autoReset">Specifies if timer is auto reseted.</param>
        </member>
        <member name="T:LumiSoft.Net.UDP.UDP_Server">
            <summary>
            This class implements generic UDP server.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.UDP.UDP_Server.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.UDP.UDP_Server.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.UDP.UDP_Server.Start">
            <summary>
            Starts UDP server.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.UDP.UDP_Server.Stop">
            <summary>
            Stops UDP server.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.UDP.UDP_Server.Restart">
            <summary>
            Restarts running server. If server is not running, this methods has no efffect.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.UDP.UDP_Server.SendPacket(System.Byte[],System.Int32,System.Int32,System.Net.IPEndPoint)">
            <summary>
            Sends specified UDP packet to the specified remote end point.
            </summary>
            <param name="packet">UDP packet to send.</param>
            <param name="offset">Offset in the buffer.</param>
            <param name="count">Number of bytes to send.</param>
            <param name="remoteEP">Remote end point.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised whan UDP server is not running and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when any of the arumnets is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.UDP.UDP_Server.SendPacket(System.Byte[],System.Int32,System.Int32,System.Net.IPEndPoint,System.Net.IPEndPoint@)">
            <summary>
            Sends specified UDP packet to the specified remote end point.
            </summary>
            <param name="packet">UDP packet to send.</param>
            <param name="offset">Offset in the buffer.</param>
            <param name="count">Number of bytes to send.</param>
            <param name="remoteEP">Remote end point.</param>
            <param name="localEP">Returns local IP end point which was used to send UDP packet.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised whan UDP server is not running and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when any of the arumnets is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.UDP.UDP_Server.SendPacket(System.Net.IPEndPoint,System.Byte[],System.Int32,System.Int32,System.Net.IPEndPoint)">
            <summary>
            Sends specified UDP packet to the specified remote end point.
            </summary>
            <param name="localEP">Local end point to use for sending.</param>
            <param name="packet">UDP packet to send.</param>
            <param name="offset">Offset in the buffer.</param>
            <param name="count">Number of bytes to send.</param>
            <param name="remoteEP">Remote end point.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised whan UDP server is not running and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when any of the arumnets is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.UDP.UDP_Server.SendPacket(System.Net.Sockets.Socket,System.Byte[],System.Int32,System.Int32,System.Net.IPEndPoint,System.Net.IPEndPoint@)">
            <summary>
            Sends specified UDP packet to the specified remote end point.
            </summary>
            <param name="socket">UDP socket to use for data sending.</param>
            <param name="packet">UDP packet to send.</param>
            <param name="offset">Offset in the buffer.</param>
            <param name="count">Number of bytes to send.</param>
            <param name="remoteEP">Remote end point.</param>
            <param name="localEP">Returns local IP end point which was used to send UDP packet.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised whan UDP server is not running and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when any of the arumnets is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.UDP.UDP_Server.GetLocalEndPoint(System.Net.IPEndPoint)">
            <summary>
            Gets suitable local IP end point for the specified remote endpoint.
            If there are multiple sending local end points, they will be load-balanched with round-robin.
            </summary>
            <param name="remoteEP">Remote end point.</param>
            <returns>Returns local IP end point.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when argument <b>remoteEP</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when argument <b>remoteEP</b> has invalid value.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when no suitable IPv4 or IPv6 socket for <b>remoteEP</b>.</exception>
        </member>
        <member name="M:LumiSoft.Net.UDP.UDP_Server.ProcessUdpPacket(LumiSoft.Net.UDP.UDP_e_PacketReceived)">
            <summary>
            Processes specified incoming UDP packet.
            </summary>
            <param name="e">Packet event data.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>e</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.UDP.UDP_Server.OnUdpPacketReceived(LumiSoft.Net.UDP.UDP_e_PacketReceived)">
            <summary>
            Raises PacketReceived event.
            </summary>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.UDP.UDP_Server.OnError(System.Exception)">
            <summary>
            Raises Error event.
            </summary>
            <param name="x">Exception occured.</param>
        </member>
        <member name="P:LumiSoft.Net.UDP.UDP_Server.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.UDP.UDP_Server.IsRunning">
            <summary>
            Gets if UDP server is running.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.UDP.UDP_Server.MTU">
            <summary>
            Gets or sets maximum network transmission unit.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when server is running and this property value is tried to set.</exception>
        </member>
        <member name="P:LumiSoft.Net.UDP.UDP_Server.Bindings">
            <summary>
            Gets or sets IP end point where UDP server is binded.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when null value is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.UDP.UDP_Server.StartTime">
            <summary>
            Gets time when server was started.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised whan UDP server is not running and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.UDP.UDP_Server.BytesReceived">
            <summary>
            Gets how many bytes this UDP server has received since start.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised whan UDP server is not running and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.UDP.UDP_Server.PacketsReceived">
            <summary>
            Gets how many UDP packets this UDP server has received since start.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised whan UDP server is not running and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.UDP.UDP_Server.BytesSent">
            <summary>
            Gets how many bytes this UDP server has sent since start.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised whan UDP server is not running and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.UDP.UDP_Server.PacketsSent">
            <summary>
            Gets how many UDP packets this UDP server has sent since start.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised whan UDP server is not running and this property is accessed.</exception>
        </member>
        <member name="E:LumiSoft.Net.UDP.UDP_Server.PacketReceived">
            <summary>
            This event is raised when new UDP packet received.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.UDP.UDP_Server.Error">
            <summary>
            This event is raised when unexpected error happens.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.FTP.Client.TransferType">
            <summary>
            Transfer type.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.FTP.Client.TransferType.Ascii">
            <summary>
            ASCII transfer data.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.FTP.Client.TransferType.Binary">
            <summary>
            Binary transfer data. 
            </summary>
        </member>
        <member name="T:LumiSoft.Net.FTP.Client.FTP_Client">
            <summary>
            This class implements FTP client. Defined in RFC 959.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.#ctor">
            <summary>
            Default connection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.Dispose">
            <summary>
            Clean up any resources being used. This method is thread-safe.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.Disconnect">
            <summary>
            Closes connection to FTP server.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when FTP client is not connected.</exception>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.Reinitialize">
            <summary>
            Terminates the user and flushes all state information on the server. The connection is left open. 
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when FTP client is not connected.</exception>
            <exception cref="T:LumiSoft.Net.FTP.Client.FTP_ClientException">Is raised when FTP server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.Authenticate(System.String,System.String)">
            <summary>
            Authenticates user. Authenticate method chooses strongest possible authentication method supported by server.
            </summary>
            <param name="userName">User login name.</param>
            <param name="password">Password.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when FTP client is not connected or is already authenticated.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>userName</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.FTP.Client.FTP_ClientException">Is raised when FTP server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.Noop">
            <summary>
            Send NOOP command to server. This method can be used for keeping connection alive(not timing out).
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when FTP client is not connected.</exception>
            <exception cref="T:LumiSoft.Net.FTP.Client.FTP_ClientException">Is raised when FTP server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.Abort">
            <summary>
            Aborts an active file transfer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when FTP client is not connected.</exception>
            <exception cref="T:LumiSoft.Net.FTP.Client.FTP_ClientException">Is raised when FTP server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.GetCurrentDir">
            <summary>
            Gets current working directory in the sFTP server.
            </summary>
            <returns>Returns current working directory.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when FTP client is not connected.</exception>
            <exception cref="T:LumiSoft.Net.FTP.Client.FTP_ClientException">Is raised when FTP server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.SetCurrentDir(System.String)">
            <summary>
            Changes the current working directory on the server.
            </summary>
            <param name="path">Directory absolute or relative path to the current working directory.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when FTP client is not connected.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>path</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:LumiSoft.Net.FTP.Client.FTP_ClientException">Is raised when FTP server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.GetList">
            <summary>
            Gets files and directories in the current server directory.
            </summary>
            <returns>Returns current working directory listing.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when FTP client is not connected.</exception>
            <exception cref="T:LumiSoft.Net.FTP.Client.FTP_ClientException">Is raised when FTP server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.GetList(System.String)">
            <summary>
            Gets files and directories in the current server directory.
            </summary>
            <param name="path">Directory or file name which listing to get. Value null means current directory will be listed.</param>
            <returns>Returns current working directory listing.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when FTP client is not connected or FTP data connection has active read/write operation.</exception>
            <exception cref="T:LumiSoft.Net.FTP.Client.FTP_ClientException">Is raised when FTP server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.GetFile(System.String,System.String)">
            <summary>
            Gets specified file from FTP server.
            </summary>
            <param name="path">File absolute or relative path to the current working directory.</param>
            <param name="storePath">Local file path where to store received file.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when FTP client is not connected or FTP data connection has active read/write operation.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>path</b> or <b>storePath</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:LumiSoft.Net.FTP.Client.FTP_ClientException">Is raised when FTP server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.GetFile(System.String,System.IO.Stream)">
            <summary>
            Gets specified file from FTP server.
            </summary>
            <param name="path">File absolute or relative path to the current working directory.</param>
            <param name="stream">Stream where to store received file.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when FTP client is not connected or FTP data connection has active read/write operation.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>path</b> or <b>stream</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:LumiSoft.Net.FTP.Client.FTP_ClientException">Is raised when FTP server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.AppendToFile(System.String,System.IO.Stream)">
            <summary>
            Appends specified data to the existing file. If existing file doesn't exist, it will be created.
            </summary>
            <param name="path">FTP server file absolute or relative path to the current working directory.</param>
            <param name="stream">Stream which data append to the specified FTP server file.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when FTP client is not connected or FTP data connection has active read/write operation.</exception>
            <exception cref="T:System.ArgumentNullException">Is raied when <b>file</b> or <b>stream</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:LumiSoft.Net.FTP.Client.FTP_ClientException">Is raised when FTP server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.StoreFile(System.String,System.String)">
            <summary>
            Stores specified file to FTP server.
            </summary>
            <param name="path">File absolute or relative path to the current working directory.</param>
            <param name="sourcePath">File path which to store to FTP server.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when FTP client is not connected or FTP data connection has active read/write operation.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>path</b> or <b>sourcePath</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:LumiSoft.Net.FTP.Client.FTP_ClientException">Is raised when FTP server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.StoreFile(System.String,System.IO.Stream)">
            <summary>
            Stores specified file to FTP server.
            </summary>
            <param name="path">File absolute or relative path to the current working directory.</param>
            <param name="stream">Stream which data to store to FTP server.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when FTP client is not connected or FTP data connection has active read/write operation.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>path</b> or <b>stream</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:LumiSoft.Net.FTP.Client.FTP_ClientException">Is raised when FTP server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.DeleteFile(System.String)">
            <summary>
            Deletes specified file from ftp server.
            </summary>
            <param name="path">File absolute or relative path to the current working directory.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when FTP client is not connected.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>path</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:LumiSoft.Net.FTP.Client.FTP_ClientException">Is raised when FTP server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.Rename(System.String,System.String)">
            <summary>
            Renames file or directory to the new specified name.
            </summary>
            <param name="fromPath">Exisitng file or directory absolute or relative path to the current working directory.</param>
            <param name="toPath">New file or directory absolute or relative path to the current working directory.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when FTP client is not connected.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>fromPath</b> or <b>toPath</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:LumiSoft.Net.FTP.Client.FTP_ClientException">Is raised when FTP server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.CreateDirectory(System.String)">
            <summary>
            Creates a directory on the FTP server.
            </summary>
            <param name="path">Directory absolute or relative path to the current working directory.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when FTP client is not connected.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>path</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:LumiSoft.Net.FTP.Client.FTP_ClientException">Is raised when FTP server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.DeleteDirectory(System.String)">
            <summary>
            Deletes specified directory from FTP server.
            </summary>
            <param name="path">Directory absolute or relative path to the current working directory.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when FTP client is not connected.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>path</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:LumiSoft.Net.FTP.Client.FTP_ClientException">Is raised when FTP server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.SetTransferType(LumiSoft.Net.FTP.Client.TransferType)">
            <summary>
            Sets transfer typr.
            </summary>
            <param name="type">Transfer type.</param>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.Port">
            <summary>
            Sends PORT command to server.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.Pasv">
            <summary>
            Sends PASV command to server.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.ReadResponse">
            <summary>
            Reads FTP server response line(s).
            </summary>
            <returns>Returns FTP server response.</returns>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.OnConnected">
            <summary>
            This method is called after TCP client has sucessfully connected.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.Client.FTP_Client.TransferMode">
            <summary>
            Gets or sets data connection establish mode.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.FTP.Client.FTP_Client.DataIP">
            <summary>
            Gets or sets local IP address to use for data connection. Value null means that system will allocate it.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.FTP.Client.FTP_Client.DataPortRange">
            <summary>
            Gets or sets ports what data connection may use. Value null means that system will allocate it.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.FTP.Client.FTP_Client.GreetingText">
            <summary>
            Gets greeting text which was sent by FTP server.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed and FTP client is not connected.</exception>
        </member>
        <member name="P:LumiSoft.Net.FTP.Client.FTP_Client.ExtenededCapabilities">
            <summary>
            Gets FTP exteneded capabilities supported by FTP server.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed and FTP client is not connected.</exception>
        </member>
        <member name="P:LumiSoft.Net.FTP.Client.FTP_Client.AuthenticatedUserIdentity">
            <summary>
            Gets session authenticated user identity, returns null if not authenticated.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed and FTP client is not connected.</exception>
        </member>
        <member name="T:LumiSoft.Net.FTP.Client.FTP_Client.DataConnection">
            <summary>
            This class implements FTP client data connection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.DataConnection.#ctor(LumiSoft.Net.FTP.Client.FTP_Client)">
            <summary>
            Default constructor.
            </summary>
            <param name="owner">Data connection owner FTP client.</param>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.DataConnection.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.DataConnection.SwitchToActive">
            <summary>
            Swtiches FTP data connection to active mode.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.DataConnection.SwitchToPassive(System.Net.IPEndPoint)">
            <summary>
            Swtiches FTP data connection to passive mode and connects to the sepcified FTP server.
            </summary>
            <param name="remoteEP">FTP server IP end point.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>remoteEP</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.DataConnection.ReadAll(System.IO.Stream)">
            <summary>
            Reads all data from FTP data connection and stores to the specified stream.
            </summary>
            <param name="stream">Stream where to store data.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.DataConnection.WriteAll(System.IO.Stream)">
            <summary>
            Writes all data from the specified stream to FTP data connection.
            </summary>
            <param name="stream">Stream which data to write.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.DataConnection.WaitFtpServerToConnect(System.Int32)">
            <summary>
            Waits FTP server to connect to this data connection.
            </summary>
            <param name="waitTime">Wait time out in seconds.</param>
            <returns>Returns connected network stream.</returns>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.DataConnection.CreateSocket">
            <summary>
            Creates new socket for data connection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.DataConnection.CleanUpSocket">
            <summary>
            Cleans up socket for reuse.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.DataConnection.TransferStream(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copies all source stream data to the specified target stream.
            </summary>
            <param name="source">Source stream.</param>
            <param name="target">Target stream.</param>
        </member>
        <member name="P:LumiSoft.Net.FTP.Client.FTP_Client.DataConnection.LocalEndPoint">
            <summary>
            Gets data connection local IP end point.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.Client.FTP_Client.DataConnection.LastActivity">
            <summary>
            Gets last time when data connection has read or written data.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.Client.FTP_Client.DataConnection.IsActive">
            <summary>
            Gets if there is active read or write job in data stream.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.FTP.Server.FTP_Server">
            <summary>
            FTP Server component.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_Server.#ctor">
            <summary>
            Defalut constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_Server.OnMaxConnectionsExceeded(LumiSoft.Net.FTP.Server.FTP_Session)">
            <summary>
            Is called when new incoming session and server maximum allowed connections exceeded.
            </summary>
            <param name="session">Incoming session.</param>
            <remarks>This method allows inhereted classes to report error message to connected client.
            Session will be disconnected after this method completes.
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_Server.OnMaxConnectionsPerIPExceeded(LumiSoft.Net.FTP.Server.FTP_Session)">
            <summary>
            Is called when new incoming session and server maximum allowed connections per connected IP exceeded.
            </summary>
            <param name="session">Incoming session.</param>
            <remarks>This method allows inhereted classes to report error message to connected client.
            Session will be disconnected after this method completes.
            </remarks>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.FTP_Server.GreetingText">
            <summary>
            Gets or sets server greeting text.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.FTP_Server.MaxBadCommands">
            <summary>
            Gets or sets how many bad commands session can have before it's terminated. Value 0 means unlimited.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid value is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.FTP_Server.PassivePublicIP">
            <summary>
            Gets or sets passive mode public IP address what is reported to clients. 
            This property is manly needed if FTP server is running behind NAT. 
            Value null means not spcified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.FTP_Server.PassiveStartPort">
            <summary>
            Gets or sets passive mode start port form which server starts using ports.
            </summary>
            <exception cref="T:System.ArgumentException">Is raised when ivalid value is passed.</exception>
        </member>
        <member name="T:LumiSoft.Net.FTP.Server.FTP_Session">
            <summary>
            FTP Session.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_Session.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_Session.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_Session.Start">
            <summary>
            Starts session processing.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_Session.OnError(System.Exception)">
            <summary>
            Is called when session has processing error.
            </summary>
            <param name="x">Exception happened.</param>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_Session.OnTimeout">
            <summary>
            This method is called when specified session times out.
            </summary>
            <remarks>
            This method allows inhereted classes to report error message to connected client.
            Session will be disconnected after this method completes.
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_Session.BeginReadCmd">
            <summary>
            Starts reading incoming command from the connected client.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_Session.ProcessCmd(LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP)">
            <summary>
            Completes command reading operation.
            </summary>
            <param name="op">Operation.</param>
            <returns>Returns true if server should start reading next command.</returns>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_Session.WriteLine(System.String)">
            <summary>
            Sends and logs specified line to connected host.
            </summary>
            <param name="line">Line to send.</param>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_Session.LogAddText(System.String)">
            <summary>
            Logs specified text.
            </summary>
            <param name="text">text to log.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>text</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_Session.OnStarted(System.String)">
            <summary>
            Raises <b>Started</b> event.
            </summary>
            <param name="reply">Default FTP server reply.</param>
            <returns>Returns event args.</returns>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_Session.OnAuthenticate(System.String,System.String)">
            <summary>
            Raises <b>Authenticate</b> event.
            </summary>
            <param name="user">User name.</param>
            <param name="password">Password.</param>
            <returns>Returns event args.</returns>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_Session.OnGetFile(LumiSoft.Net.FTP.Server.FTP_e_GetFile)">
            <summary>
            Raises <b>GetFile</b> event.
            </summary>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_Session.OnStor(LumiSoft.Net.FTP.Server.FTP_e_Stor)">
            <summary>
            Raises <b>Stor</b> event.
            </summary>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_Session.OnGetFileSize(LumiSoft.Net.FTP.Server.FTP_e_GetFileSize)">
            <summary>
            Raises <b>GetFileSize</b> event.
            </summary>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_Session.OnDele(LumiSoft.Net.FTP.Server.FTP_e_Dele)">
            <summary>
            Raises <b>Dele</b> event.
            </summary>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_Session.OnAppe(LumiSoft.Net.FTP.Server.FTP_e_Appe)">
            <summary>
            Raises <b>Appe</b> event.
            </summary>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_Session.OnCwd(LumiSoft.Net.FTP.Server.FTP_e_Cwd)">
            <summary>
            Raises <b>Cwd</b> event.
            </summary>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_Session.OnCdup(LumiSoft.Net.FTP.Server.FTP_e_Cdup)">
            <summary>
            Raises <b>Cdup</b> event.
            </summary>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_Session.OnRmd(LumiSoft.Net.FTP.Server.FTP_e_Rmd)">
            <summary>
            Raises <b>Rmd</b> event.
            </summary>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_Session.OnMkd(LumiSoft.Net.FTP.Server.FTP_e_Mkd)">
            <summary>
            Raises <b>Mkd</b> event.
            </summary>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_Session.OnGetDirListing(LumiSoft.Net.FTP.Server.FTP_e_GetDirListing)">
            <summary>
            Raises <b>GetDirListing</b> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_Session.OnRnto(LumiSoft.Net.FTP.Server.FTP_e_Rnto)">
            <summary>
            Raises <b>Rnto</b> event.
            </summary>
            <param name="e">Event data.</param>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.FTP_Session.Server">
            <summary>
            Gets session owner FTP server.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.FTP_Session.Authentications">
            <summary>
            Gets supported SASL authentication methods collection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.FTP_Session.BadCommands">
            <summary>
            Gets number of bad commands happened on POP3 session.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.FTP_Session.AuthenticatedUserIdentity">
            <summary>
            Gets authenticated user identity or null if user has not authenticated.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.FTP_Session.CurrentDir">
            <summary>
            Gets or sets current working directory.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.FTP_Session.PassiveMode">
            <summary>
            Gets if sessions is in passive mode.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.FTP.Server.FTP_Session.Started">
            <summary>
            Is raised when session has started processing and needs to send 220 greeting or 500 error resposne to the connected client.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.FTP.Server.FTP_Session.Authenticate">
            <summary>
            This event is raised when session needs to authenticate session using USER/PASS FTP authentication.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.FTP.Server.FTP_Session.GetFile">
            <summary>
            This event is raised when session needs to get specified file.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.FTP.Server.FTP_Session.Stor">
            <summary>
            This event is raised when session needs to complete STOR(store file) command.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.FTP.Server.FTP_Session.GetFileSize">
            <summary>
            This event is raised when session needs to get specified file size.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.FTP.Server.FTP_Session.Dele">
            <summary>
            This event is raised when session needs to complete DELE(delete file) command.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.FTP.Server.FTP_Session.Appe">
            <summary>
            This event is raised when session needs to complete APPE(append to file) command.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.FTP.Server.FTP_Session.Cwd">
            <summary>
            This event is raised when session needs to complete CWD(change working directory) command.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.FTP.Server.FTP_Session.Cdup">
            <summary>
            This event is raised when session needs to complete CDUP(change directory up) command.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.FTP.Server.FTP_Session.Rmd">
            <summary>
            This event is raised when session needs to complete RMD(remove directory) command.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.FTP.Server.FTP_Session.Mkd">
            <summary>
            This event is raised when session needs to complete MKD(make directory) command.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.FTP.Server.FTP_Session.GetDirListing">
            <summary>
            This event is raised when session needs to get directory listing.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.FTP.Server.FTP_Session.Rnto">
            <summary>
            This event is raised when session needs to complete RNTO(rename file/directory to) command.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.FTP.Server.FTP_Session.DataConnection">
            <summary>
            This class represents FTP session data connection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_Session.DataConnection.#ctor(LumiSoft.Net.FTP.Server.FTP_Session,System.IO.Stream,System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="session">Owner FTP session.</param>
            <param name="stream">Data connection data stream.</param>
            <param name="read_write">Specifies if data read from remote endpoint or written to it.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>session</b> or <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_Session.DataConnection.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_Session.DataConnection.Start">
            <summary>
            Starts data connection processing.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this is disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_Session.DataConnection.Abort">
            <summary>
            Aborts transfer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this is disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_Session.DataConnection.WriteLine(System.String)">
            <summary>
            Writes line to control connection.
            </summary>
            <param name="line">Line.</param>
        </member>
        <member name="T:LumiSoft.Net.IO.DataSizeExceededException">
            <summary>
            The exception that is thrown when maximum allowed data size has exceeded.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.DataSizeExceededException.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IO.IncompleteDataException">
            <summary>
            The exception that is thrown when incomplete data received.
            For example for ReadPeriodTerminated() method reaches end of stream before getting period terminator.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.IncompleteDataException.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.IncompleteDataException.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="message">Exception message text.</param>
        </member>
        <member name="T:LumiSoft.Net.IO.LineSizeExceededException">
            <summary>
            The exception that is thrown when maximum allowed line size has exceeded.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.LineSizeExceededException.#ctor">
            <summary>
            Default coonstructor.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IO.SizeExceededAction">
            <summary>
            Specifies action what is done if requested action exceeds maximum allowed size.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IO.SizeExceededAction.ThrowException">
            <summary>
            Throws exception at once when maximum size exceeded.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IO.SizeExceededAction.JunkAndThrowException">
            <summary>
            Junks all data what exceeds maximum allowed size and after requested operation completes,
            throws exception.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IO.JunkingStream">
            <summary>
            This stream just junks all written data.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.JunkingStream.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.JunkingStream.Flush">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.JunkingStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the current position of the stream to the given value. This method always throws a NotSupportedException.
            </summary>
            <param name="offset">This parameter is not used.</param>
            <param name="origin">This parameter is not used.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IO.JunkingStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the stream. This method always throws a NotSupportedException.
            </summary>
            <param name="value">This parameter is not used.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.JunkingStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from the stream. This method always throws a NotSupportedException.
            </summary>
            <param name="buffer">This parameter is not used.</param>
            <param name="offset">This parameter is not used.</param>
            <param name="size">This parameter is not used.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IO.JunkingStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes data to the stream.
            </summary>
            <param name="buffer">An array of type Byte that contains the data to write to the stream.</param>
            <param name="offset">The location in buffer from which to start writing data.</param>
            <param name="size">The number of bytes to write to the stream.</param>
        </member>
        <member name="P:LumiSoft.Net.IO.JunkingStream.CanRead">
            <summary>
            Gets a value indicating whether the stream supports reading. This property always returns false.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.JunkingStream.CanSeek">
            <summary>
            Gets a value indicating whether the stream supports seeking. This property always returns false.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.JunkingStream.CanWrite">
            <summary>
            Gets a value that indicates whether the stream supports writing.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.JunkingStream.Length">
            <summary>
            Gets the length of the data available on the stream. This property always throws a NotSupportedException.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.JunkingStream.Position">
            <summary>
            Gets or sets the current position in the stream. This property always throws a NotSupportedException.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Log.LogEntry">
            <summary>
            Implements log entry.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Log.LogEntry.#ctor(LumiSoft.Net.Log.LogEntryType,System.String,System.Int64,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="type">Log entry type.</param>
            <param name="id">Log entry ID.</param>
            <param name="size">Specified how much data was readed or written.</param>
            <param name="text">Description text.</param>
        </member>
        <member name="M:LumiSoft.Net.Log.LogEntry.#ctor(LumiSoft.Net.Log.LogEntryType,System.String,System.Security.Principal.GenericIdentity,System.Int64,System.String,System.Net.IPEndPoint,System.Net.IPEndPoint,System.Byte[])">
            <summary>
            Default constructor.
            </summary>
            <param name="type">Log entry type.</param>
            <param name="id">Log entry ID.</param>
            <param name="userIdentity">Log entry owner user or null if none.</param>
            <param name="size">Log entry read/write size in bytes.</param>
            <param name="text">Log text.</param>
            <param name="localEP">Local IP end point.</param>
            <param name="remoteEP">Remote IP end point.</param>
            <param name="data">Log data.</param>
        </member>
        <member name="M:LumiSoft.Net.Log.LogEntry.#ctor(LumiSoft.Net.Log.LogEntryType,System.String,System.Security.Principal.GenericIdentity,System.Int64,System.String,System.Net.IPEndPoint,System.Net.IPEndPoint,System.Exception)">
            <summary>
            Default constructor.
            </summary>
            <param name="type">Log entry type.</param>
            <param name="id">Log entry ID.</param>
            <param name="userIdentity">Log entry owner user or null if none.</param>
            <param name="size">Log entry read/write size in bytes.</param>
            <param name="text">Log text.</param>
            <param name="localEP">Local IP end point.</param>
            <param name="remoteEP">Remote IP end point.</param>
            <param name="exception">Exception happened. Can be null.</param>
        </member>
        <member name="P:LumiSoft.Net.Log.LogEntry.EntryType">
            <summary>
            Gets log entry type.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Log.LogEntry.ID">
            <summary>
            Gets log entry ID.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Log.LogEntry.Time">
            <summary>
            Gets time when log entry was created.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Log.LogEntry.UserIdentity">
            <summary>
            Gets log entry related user identity.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Log.LogEntry.Size">
            <summary>
            Gets how much data was readed or written, depends on <b>LogEntryType</b>.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Log.LogEntry.Text">
            <summary>
            Gets describing text.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Log.LogEntry.Exception">
            <summary>
            Gets exception happened. This property is available only if LogEntryType.Exception.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Log.LogEntry.LocalEndPoint">
            <summary>
            Gets local IP end point. Value null means no local end point.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Log.LogEntry.RemoteEndPoint">
            <summary>
            Gets remote IP end point. Value null means no remote end point.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Log.LogEntry.Data">
            <summary>
            Gest log data. Value null means no log data.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Log.LogEntryType">
            <summary>
            Specifies log entry type.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Log.LogEntryType.Read">
            <summary>
            Read entry.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Log.LogEntryType.Write">
            <summary>
            Write entry.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Log.LogEntryType.Text">
            <summary>
            Text entry.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Log.LogEntryType.Exception">
            <summary>
            Exception entry.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Log.Logger">
            <summary>
            General logging module.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Log.Logger.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Log.Logger.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Log.Logger.AddRead(System.Int64,System.String)">
            <summary>
            Adds read log entry.
            </summary>
            <param name="size">Readed data size in bytes.</param>
            <param name="text">Log text.</param>
        </member>
        <member name="M:LumiSoft.Net.Log.Logger.AddRead(System.String,System.Security.Principal.GenericIdentity,System.Int64,System.String,System.Net.IPEndPoint,System.Net.IPEndPoint)">
            <summary>
            Adds read log entry.
            </summary>
            <param name="id">Log entry ID.</param>
            <param name="size">Readed data size in bytes.</param>
            <param name="text">Log text.</param>
            <param name="userIdentity">Authenticated user identity.</param>
            <param name="localEP">Local IP endpoint.</param>
            <param name="remoteEP">Remote IP endpoint.</param>
        </member>
        <member name="M:LumiSoft.Net.Log.Logger.AddRead(System.String,System.Security.Principal.GenericIdentity,System.Int64,System.String,System.Net.IPEndPoint,System.Net.IPEndPoint,System.Byte[])">
            <summary>
            Adds read log entry.
            </summary>
            <param name="id">Log entry ID.</param>
            <param name="size">Readed data size in bytes.</param>
            <param name="text">Log text.</param>
            <param name="userIdentity">Authenticated user identity.</param>
            <param name="localEP">Local IP endpoint.</param>
            <param name="remoteEP">Remote IP endpoint.</param>
            <param name="data">Log data.</param>
        </member>
        <member name="M:LumiSoft.Net.Log.Logger.AddWrite(System.Int64,System.String)">
            <summary>
            Add write log entry.
            </summary>
            <param name="size">Written data size in bytes.</param>
            <param name="text">Log text.</param>
        </member>
        <member name="M:LumiSoft.Net.Log.Logger.AddWrite(System.String,System.Security.Principal.GenericIdentity,System.Int64,System.String,System.Net.IPEndPoint,System.Net.IPEndPoint)">
            <summary>
            Add write log entry.
            </summary>
            <param name="id">Log entry ID.</param>
            <param name="size">Written data size in bytes.</param>
            <param name="text">Log text.</param>
            <param name="userIdentity">Authenticated user identity.</param>
            <param name="localEP">Local IP endpoint.</param>
            <param name="remoteEP">Remote IP endpoint.</param>
        </member>
        <member name="M:LumiSoft.Net.Log.Logger.AddWrite(System.String,System.Security.Principal.GenericIdentity,System.Int64,System.String,System.Net.IPEndPoint,System.Net.IPEndPoint,System.Byte[])">
            <summary>
            Add write log entry.
            </summary>
            <param name="id">Log entry ID.</param>
            <param name="size">Written data size in bytes.</param>
            <param name="text">Log text.</param>
            <param name="userIdentity">Authenticated user identity.</param>
            <param name="localEP">Local IP endpoint.</param>
            <param name="remoteEP">Remote IP endpoint.</param>
            <param name="data">Log data.</param>
        </member>
        <member name="M:LumiSoft.Net.Log.Logger.AddText(System.String)">
            <summary>
            Adds text entry.
            </summary>
            <param name="text">Log text.</param>
        </member>
        <member name="M:LumiSoft.Net.Log.Logger.AddText(System.String,System.String)">
            <summary>
            Adds text entry.
            </summary>
            <param name="id">Log entry ID.</param>
            <param name="text">Log text.</param>
        </member>
        <member name="M:LumiSoft.Net.Log.Logger.AddText(System.String,System.Security.Principal.GenericIdentity,System.String,System.Net.IPEndPoint,System.Net.IPEndPoint)">
            <summary>
            Adds text entry.
            </summary>
            <param name="id">Log entry ID.</param>
            <param name="text">Log text.</param>
            <param name="userIdentity">Authenticated user identity.</param>
            <param name="localEP">Local IP endpoint.</param>
            <param name="remoteEP">Remote IP endpoint.</param>
        </member>
        <member name="M:LumiSoft.Net.Log.Logger.AddException(System.String,System.Security.Principal.GenericIdentity,System.String,System.Net.IPEndPoint,System.Net.IPEndPoint,System.Exception)">
            <summary>
            Adds exception entry.
            </summary>
            <param name="id">Log entry ID.</param>
            <param name="text">Log text.</param>
            <param name="userIdentity">Authenticated user identity.</param>
            <param name="localEP">Local IP endpoint.</param>
            <param name="remoteEP">Remote IP endpoint.</param>
            <param name="exception">Exception happened.</param>
        </member>
        <member name="M:LumiSoft.Net.Log.Logger.OnWriteLog(LumiSoft.Net.Log.LogEntry)">
            <summary>
            Raises WriteLog event.
            </summary>
            <param name="entry">Log entry.</param>
        </member>
        <member name="E:LumiSoft.Net.Log.Logger.WriteLog">
            <summary>
            Is raised when new log entry is available.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.WellKnownPorts">
            <summary>
            This class provides well known TCP/UDP service ports.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.WellKnownPorts.FTP_Data">
            <summary>
            FTP - data port.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.WellKnownPorts.FTP_Control">
            <summary>
            FTP - control (command) port.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.WellKnownPorts.SMTP">
            <summary>
            SMTP protocol.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.WellKnownPorts.DNS">
            <summary>
            DNS protocol.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.WellKnownPorts.HTTP">
            <summary>
            HTTP protocol.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.WellKnownPorts.POP3">
            <summary>
            POP3 protocol.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.WellKnownPorts.NNTP">
            <summary>
            NNTP (Network News Transfer Protocol)  protocol.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.WellKnownPorts.NTP">
            <summary>
            NTP (Network Time Protocol) protocol.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.WellKnownPorts.IMAP4">
            <summary>
            IMAP4 protocol.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.WellKnownPorts.HTTPS">
            <summary>
            HTTPS protocol.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.WellKnownPorts.SMTP_SSL">
            <summary>
            SMTP over SSL protocol.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.WellKnownPorts.FTP_Control_SSL">
            <summary>
            FTP over SSL protocol.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.WellKnownPorts.IMAP4_SSL">
            <summary>
            IMAP4 over SSL protocol.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.WellKnownPorts.POP3_SSL">
            <summary>
            POP3 over SSL protocol.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.UriSchemes">
            <summary>
            This class represents well known URI schemes.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.UriSchemes.dav">
            <summary>
            HTTP Extensions for Distributed Authoring (WebDAV).
            </summary>
        </member>
        <member name="F:LumiSoft.Net.UriSchemes.file">
            <summary>
            Addressing files on local or network file systems.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.UriSchemes.ftp">
            <summary>
            FTP resources.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.UriSchemes.http">
            <summary>
            HTTP resources.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.UriSchemes.https">
            <summary>
            HTTP connections secured using SSL/TLS.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.UriSchemes.mailto">
            <summary>
            SMTP e-mail addresses and default content.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.UriSchemes.sip">
            <summary>
            Session Initiation Protocol (SIP).
            </summary>
        </member>
        <member name="F:LumiSoft.Net.UriSchemes.sips">
            <summary>
            Session Initiation Protocol (SIP) using TLS.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.UriSchemes.tel">
            <summary>
            Telephone numbers.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.AsyncResultState">
            <summary>
            (For internal use only). This class provides holder for IAsyncResult interface and extends it's features.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AsyncResultState.#ctor(System.Object,System.Delegate,System.AsyncCallback,System.Object)">
            <summary>
            Default constructor.
            </summary>
            <param name="asyncObject">Caller's async object.</param>
            <param name="asyncDelegate">Delegate which is called asynchronously.</param>
            <param name="callback">Callback to call when the connect operation is complete.</param>
            <param name="state">User data.</param>
        </member>
        <member name="M:LumiSoft.Net.AsyncResultState.SetAsyncResult(System.IAsyncResult)">
            <summary>
            Sets AsyncResult value.
            </summary>
            <param name="asyncResult">Asycnhronous result to wrap.</param>
        </member>
        <member name="M:LumiSoft.Net.AsyncResultState.CompletedCallback(System.IAsyncResult)">
            <summary>
            This method is called by AsyncDelegate when asynchronous operation completes. 
            </summary>
            <param name="ar">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
        </member>
        <member name="P:LumiSoft.Net.AsyncResultState.AsyncObject">
            <summary>
            Gets or sets caller's async object.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AsyncResultState.AsyncDelegate">
            <summary>
            Gets delegate which is called asynchronously.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AsyncResultState.AsyncResult">
            <summary>
            Gets source asynchronous result what we wrap.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AsyncResultState.IsEndCalled">
            <summary>
            Gets if the user called the End*() method.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AsyncResultState.AsyncState">
            <summary>
            Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AsyncResultState.AsyncWaitHandle">
            <summary>
            Gets a WaitHandle that is used to wait for an asynchronous operation to complete.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AsyncResultState.CompletedSynchronously">
            <summary>
            Gets an indication of whether the asynchronous operation completed synchronously.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AsyncResultState.IsCompleted">
            <summary>
            Gets an indication whether the asynchronous operation has completed.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IPBindInfo">
            <summary>
            Holds IP bind info.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IPBindInfo.#ctor(System.String,LumiSoft.Net.BindInfoProtocol,System.Net.IPAddress,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="hostName">Host name.</param>
            <param name="protocol">Bind protocol.</param>
            <param name="ip">IP address to listen.</param>
            <param name="port">Port to listen.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>ip</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.IPBindInfo.#ctor(System.String,System.Net.IPAddress,System.Int32,LumiSoft.Net.SslMode,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Default constructor.
            </summary>
            <param name="hostName">Host name.</param>
            <param name="ip">IP address to listen.</param>
            <param name="port">Port to listen.</param>
            <param name="sslMode">Specifies SSL mode.</param>
            <param name="sslCertificate">Certificate to use for SSL connections.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>ip</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.IPBindInfo.#ctor(System.String,LumiSoft.Net.BindInfoProtocol,System.Net.IPAddress,System.Int32,LumiSoft.Net.SslMode,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Default constructor.
            </summary>
            <param name="hostName">Host name.</param>
            <param name="protocol">Bind protocol.</param>
            <param name="ip">IP address to listen.</param>
            <param name="port">Port to listen.</param>
            <param name="sslMode">Specifies SSL mode.</param>
            <param name="sslCertificate">Certificate to use for SSL connections.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>ip</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.IPBindInfo.Equals(System.Object)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>Returns true if two objects are equal.</returns>
        </member>
        <member name="M:LumiSoft.Net.IPBindInfo.GetHashCode">
            <summary>
            Returns the hash code.
            </summary>
            <returns>Returns the hash code.</returns>
        </member>
        <member name="P:LumiSoft.Net.IPBindInfo.HostName">
            <summary>
            Gets host name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IPBindInfo.Protocol">
            <summary>
            Gets protocol.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IPBindInfo.EndPoint">
            <summary>
            Gets IP end point.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IPBindInfo.IP">
            <summary>
            Gets IP address.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IPBindInfo.Port">
            <summary>
            Gets port.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IPBindInfo.SslMode">
            <summary>
            Gets SSL mode.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IPBindInfo.SSL_Certificate">
            <summary>
            Gets SSL certificate.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IPBindInfo.Certificate">
            <summary>
            Gets SSL certificate.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IPBindInfo.Tag">
            <summary>
            Gets or sets user data. This is used internally don't use it !!!.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.CircleCollection`1">
            <summary>
            Circle collection. Elements will be circled clockwise.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.CircleCollection`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.CircleCollection`1.Add(`0[])">
            <summary>
            Adds specified items to the collection.
            </summary>
            <param name="items">Items to add.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>items</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.CircleCollection`1.Add(`0)">
            <summary>
            Adds specified item to the collection.
            </summary>
            <param name="item">Item to add.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>item</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.CircleCollection`1.Remove(`0)">
            <summary>
            Removes specified item from the collection.
            </summary>
            <param name="item">Item to remove.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>item</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.CircleCollection`1.Clear">
            <summary>
            Clears all items from collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.CircleCollection`1.Contains(`0)">
            <summary>
            Gets if the collection contain the specified item.
            </summary>
            <param name="item">Item to check.</param>
            <returns>Returns true if the collection contain the specified item, otherwise false.</returns>
        </member>
        <member name="M:LumiSoft.Net.CircleCollection`1.Next">
            <summary>
            Gets next item from the collection. This method is thread-safe.
            </summary>
            <exception cref="T:System.InvalidOperationException">Is raised when thre is no items in the collection.</exception>
        </member>
        <member name="M:LumiSoft.Net.CircleCollection`1.ToArray">
            <summary>
            Copies all elements to new array, all elements will be in order they added. This method is thread-safe.
            </summary>
            <returns>Returns elements in a new array.</returns>
        </member>
        <member name="M:LumiSoft.Net.CircleCollection`1.ToCurrentOrderArray">
            <summary>
            Copies all elements to new array, all elements will be in current circle order. This method is thread-safe.
            </summary>
            <returns>Returns elements in a new array.</returns>
        </member>
        <member name="P:LumiSoft.Net.CircleCollection`1.Count">
            <summary>
            Gets number of items in the collection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.CircleCollection`1.Item(System.Int32)">
            <summary>
            Gets item at the specified index.
            </summary>
            <param name="index">Item zero based index.</param>
            <returns>Returns item at the specified index.</returns>
        </member>
        <member name="T:LumiSoft.Net.BindInfoProtocol">
            <summary>
            Specifies BindInfo protocol.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.BindInfoProtocol.TCP">
            <summary>
            TCP protocol.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.BindInfoProtocol.UDP">
            <summary>
            UDP protocol.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.StringReader">
            <summary>
            String reader.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.StringReader.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="source">Source string.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>source</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.StringReader.AppendString(System.String)">
            <summary>
            Appends specified string to SourceString.
            </summary>
            <param name="value">String value to append.</param>
        </member>
        <member name="M:LumiSoft.Net.StringReader.ReadToFirstChar">
            <summary>
            Reads to first char, skips white-space(SP,VTAB,HTAB,CR,LF) from the beginning of source string.
            </summary>
            <returns>Returns white-space chars which was readed.</returns>
        </member>
        <member name="M:LumiSoft.Net.StringReader.ReadSpecifiedLength(System.Int32)">
            <summary>
            Reads string with specified length. Throws exception if read length is bigger than source string length.
            </summary>
            <param name="length">Number of chars to read.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.StringReader.QuotedReadToDelimiter(System.Char)">
            <summary>
            Reads string to specified delimiter or to end of underlying string. Notes: Delimiter in quoted string is skipped.
            Delimiter is removed by default.
            For example: delimiter = ',', text = '"aaaa,eee",qqqq' - then result is '"aaaa,eee"'.
            </summary>
            <param name="delimiter">Data delimiter.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.StringReader.QuotedReadToDelimiter(System.Char[])">
            <summary>
            Reads string to specified delimiter or to end of underlying string. Notes: Delimiters in quoted string is skipped.
            Delimiter is removed by default.
            For example: delimiter = ',', text = '"aaaa,eee",qqqq' - then result is '"aaaa,eee"'.
            </summary>
            <param name="delimiters">Data delimiters.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.StringReader.QuotedReadToDelimiter(System.Char[],System.Boolean)">
            <summary>
            Reads string to specified delimiter or to end of underlying string. Notes: Delimiters in quoted string is skipped. 
            For example: delimiter = ',', text = '"aaaa,eee",qqqq' - then result is '"aaaa,eee"'.
            </summary>
            <param name="delimiters">Data delimiters.</param>
            <param name="removeDelimiter">Specifies if delimiter is removed from underlying string.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.StringReader.ReadWord">
            <summary>
            Reads word from string. Returns null if no word is available.
            Word reading begins from first char, for example if SP"text", then space is trimmed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.StringReader.ReadWord(System.Boolean)">
            <summary>
            Reads word from string. Returns null if no word is available.
            Word reading begins from first char, for example if SP"text", then space is trimmed.
            </summary>
            <param name="unQuote">Specifies if quoted string word is unquoted.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.StringReader.ReadWord(System.Boolean,System.Char[],System.Boolean)">
            <summary>
            Reads word from string. Returns null if no word is available.
            Word reading begins from first char, for example if SP"text", then space is trimmed.
            </summary>
            <param name="unQuote">Specifies if quoted string word is unquoted.</param>
            <param name="wordTerminatorChars">Specifies chars what terminate word.</param>
            <param name="removeWordTerminator">Specifies if work terminator is removed.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.StringReader.ReadParenthesized">
            <summary>
            Reads parenthesized value. Supports {},(),[],&lt;&gt; parenthesis. 
            Throws exception if there isn't parenthesized value or closing parenthesize is missing.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.StringReader.ReadToEnd">
            <summary>
            Reads all remaining string, returns null if no chars left to read.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.StringReader.RemoveFromEnd(System.Int32)">
            <summary>
            Removes specified count of chars from the end of the source string.
            </summary>
            <param name="count">Char count.</param>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.StringReader.StartsWith(System.String)">
            <summary>
            Gets if source string starts with specified value. Compare is case-sensitive.
            </summary>
            <param name="value">Start string value.</param>
            <returns>Returns true if source string starts with specified value.</returns>
        </member>
        <member name="M:LumiSoft.Net.StringReader.StartsWith(System.String,System.Boolean)">
            <summary>
            Gets if source string starts with specified value.
            </summary>
            <param name="value">Start string value.</param>
            <param name="case_sensitive">Specifies if compare is case-sensitive.</param>
            <returns>Returns true if source string starts with specified value.</returns>
        </member>
        <member name="M:LumiSoft.Net.StringReader.EndsWith(System.String)">
            <summary>
            Gets if source string ends with specified value. Compare is case-sensitive.
            </summary>
            <param name="value">Start string value.</param>
            <returns>Returns true if source string ends with specified value.</returns>
        </member>
        <member name="M:LumiSoft.Net.StringReader.EndsWith(System.String,System.Boolean)">
            <summary>
            Gets if source string ends with specified value.
            </summary>
            <param name="value">Start string value.</param>
            <param name="case_sensitive">Specifies if compare is case-sensitive.</param>
            <returns>Returns true if source string ends with specified value.</returns>
        </member>
        <member name="M:LumiSoft.Net.StringReader.StartsWithWord">
            <summary>
            Gets if current source string starts with word. For example if source string starts with
            whiter space or parenthesize, this method returns false.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.StringReader.Available">
            <summary>
            Gets how many chars are available for reading.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.StringReader.OriginalString">
            <summary>
            Gets original string passed to class constructor.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.StringReader.SourceString">
            <summary>
            Gets currently remaining string.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.StringReader.Position">
            <summary>
            Gets position in original string.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.TextUtils">
            <summary>
            This class provides usefull text methods.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TextUtils.QuoteString(System.String)">
            <summary>
            Qoutes string and escapes fishy('\',"') chars.
            </summary>
            <param name="text">Text to quote.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.TextUtils.UnQuoteString(System.String)">
            <summary>
            Unquotes and unescapes escaped chars specified text. For example "xxx" will become to 'xxx', "escaped quote \"", will become to escaped 'quote "'.
            </summary>
            <param name="text">Text to unquote.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.TextUtils.EscapeString(System.String,System.Char[])">
            <summary>
            Escapes specified chars in the specified string.
            </summary>
            <param name="text">Text to escape.</param>
            <param name="charsToEscape">Chars to escape.</param>
        </member>
        <member name="M:LumiSoft.Net.TextUtils.UnEscapeString(System.String)">
            <summary>
            Unescapes all escaped chars.
            </summary>
            <param name="text">Text to unescape.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.TextUtils.SplitQuotedString(System.String,System.Char)">
            <summary>
            Splits string into string arrays. This split method won't split qouted strings, but only text outside of qouted string.
            For example: '"text1, text2",text3' will be 2 parts: "text1, text2" and text3.
            </summary>
            <param name="text">Text to split.</param>
            <param name="splitChar">Char that splits text.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.TextUtils.SplitQuotedString(System.String,System.Char,System.Boolean)">
            <summary>
            Splits string into string arrays. This split method won't split qouted strings, but only text outside of qouted string.
            For example: '"text1, text2",text3' will be 2 parts: "text1, text2" and text3.
            </summary>
            <param name="text">Text to split.</param>
            <param name="splitChar">Char that splits text.</param>
            <param name="unquote">If true, splitted parst will be unqouted if they are qouted.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.TextUtils.SplitQuotedString(System.String,System.Char,System.Boolean,System.Int32)">
            <summary>
            Splits string into string arrays. This split method won't split qouted strings, but only text outside of qouted string.
            For example: '"text1, text2",text3' will be 2 parts: "text1, text2" and text3.
            </summary>
            <param name="text">Text to split.</param>
            <param name="splitChar">Char that splits text.</param>
            <param name="unquote">If true, splitted parst will be unqouted if they are qouted.</param>
            <param name="count">Maximum number of substrings to return.</param>
            <returns>Returns splitted string.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>text</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.TextUtils.QuotedIndexOf(System.String,System.Char)">
            <summary>
            Gets first index of specified char. The specified char in quoted string is skipped.
            Returns -1 if specified char doesn't exist.
            </summary>
            <param name="text">Text in what to check.</param>
            <param name="indexChar">Char what index to get.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.TextUtils.SplitString(System.String,System.Char)">
            <summary>
            Splits string into string arrays.
            </summary>
            <param name="text">Text to split.</param>
            <param name="splitChar">Char Char that splits text.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.TextUtils.IsToken(System.String)">
            <summary>
            Gets if specified string is valid "token" value.
            </summary>
            <param name="value">String value to check.</param>
            <returns>Returns true if specified string value is valid "token" value.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised if <b>value</b> is null.</exception>
        </member>
    </members>
</doc>
