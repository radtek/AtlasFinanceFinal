using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Collections.Concurrent;
using System.Threading;

using Npgsql;

using Atlas.Common.Interface;


namespace ASSServer.Utils.PSQL.DbfImport
{
  /// <summary>
  /// Make all SR_RECNO columns to not use sequences- these are generated by branch PostgreSQL server
  /// </summary>
  public class RemoveBranchTableSequences
  {
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2100:Review SQL queries for security vulnerabilities")]
    public static bool Execute(IConfigSettings config, string dbSchemaName, List<string> progressMessages)
    {
      try
      {
        var tableNames = new List<string>();
        var sequences = new List<string>();

        using (var conn = new NpgsqlConnection(config.GetAssConnectionString()))
        {
          conn.Open();

          using (var cmd = conn.CreateCommand())
          {
            cmd.CommandText = string.Format("select distinct table_name from information_schema.columns " +
              "where column_name = 'sr_recno' and table_schema = '{0}'", dbSchemaName);
            using (var rdr = cmd.ExecuteReader())
            {
              while (rdr.Read())
              {
                tableNames.Add(rdr.GetString(0));
              }
            }

            cmd.CommandText = $"select sequence_name FROM information_schema.sequences WHERE sequence_schema = '{dbSchemaName}'";
            using (var rdr = cmd.ExecuteReader())
            {
              while (rdr.Read())
              {
                sequences.Add(rdr.GetString(0));
              }
            }
          }
        }

        var gotError = new ManualResetEventSlim(false);
        var tablesToDo = new ConcurrentQueue<string>(tableNames);
        var sequencesToDo = new ConcurrentQueue<string>(sequences);

        var tasks = new Task[4];
        for (var i = 0; i < tasks.Length; i++)
        {
          tasks[i] = Task.Factory.StartNew(() =>
          {
            string tableName;
            while (!gotError.IsSet && tablesToDo.TryDequeue(out tableName))
            {
              try
              {
                using (var conn = new NpgsqlConnection(config.GetAssConnectionString()))
                {
                  conn.Open();
                  using (var cmd = conn.CreateCommand())
                  {
                    cmd.CommandText = string.Format("ALTER TABLE \"{0}\".\"{1}\" DROP CONSTRAINT IF EXISTS {1}_sr_recno_key CASCADE", dbSchemaName, tableName);
                    cmd.ExecuteNonQuery();

                    cmd.CommandText = string.Format("ALTER TABLE \"{0}\".\"{1}\" ALTER COLUMN sr_recno DROP DEFAULT;", dbSchemaName, tableName);
                    cmd.ExecuteNonQuery();

                    progressMessages.Add(string.Format("[{0}] Dropped constraint/key", tableName));
                  }                 
                }
              }
              catch (Exception err)
              {
                progressMessages.Add(string.Format("ERROR: {0}", err.Message));
                gotError.Set();
              }
            }

            string sequenceName;
            while (!gotError.IsSet && sequencesToDo.TryDequeue(out sequenceName))
            {
              try
              {
                using (var conn = new NpgsqlConnection(config.GetAssConnectionString()))
                {
                  conn.Open();
                  using (var cmd = conn.CreateCommand())
                  {
                    // Drop Sequence
                    cmd.CommandText = $"DROP SEQUENCE IF EXISTS {dbSchemaName}.{sequenceName} CASCADE;";
                    cmd.ExecuteNonQuery();
                  }
                }
              }
              catch (Exception err)
              {
                progressMessages.Add(string.Format("ERROR: {0}", err.Message));
                gotError.Set();
              }
            }
          });
        }
        var taskDone = Task.WaitAll(tasks, TimeSpan.FromMinutes(5));

        return !gotError.IsSet && taskDone;
      }
      catch (Exception err)
      {
        progressMessages.Add(string.Format("Unexpected error: '{0}'", err.Message));

        return false;
      }
    }
  }
}