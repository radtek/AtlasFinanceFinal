<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="SqlManReceiptsAedoNaedo" xml:space="preserve">
    <value>SELECT t1.brnum, t1.loan, t1.client, t1.trdate, t1.usertime, t1.tramount, t1.glbank, t1.trtype , t1.trstat, COALESCE(t1."order", 0) AS "order", 
      COALESCE(t1.seqno, 0) AS seqno, COALESCE(t1.receiptno, 0) AS receiptno, 'N' AS legal, r1.regiondesc, l1.loanmeth, l1.payno, l1.loandate, 
      LEFT(u1.indkey_001, 4) as oper, trim(trailing FROM LEFT(u1.indkey_002, 25)) as user_name, t1.user as station, g1.bank_acct
            FROM company.trans t1
            JOIN company.asbranch b1 ON b1.brnum = t1.brnum
            JOIN company.regions r1 ON r1.regioncode = b1.regioncode
            JOIN company.loans l1 ON l1.brnum = t1.brnum AND l1.client = t1.client AND l1.loan = t1.loan
            JOIN company.asstmast u1 ON t1.oper = LEFT(u1.indkey_001, 4)
            JOIN company.glbank g1 ON g1.brnum = t1.brnum AND g1.glbank = t1.glbank
            WHERE (t1.tramount != 0) AND            
            (t1.trdate BETWEEN @startDate AND @endDate) AND (t1.glbank IN ('NAD', 'NUP')) AND (t1.trtype IN ('P', 'G', 'F')) AND
            (CHAR_LENGTH(TRIM(COALESCE(t1.npaytranid, '')::text)) = 0)
           
            UNION ALL 
           
SELECT t2.brnum, t2.loan, t2.client, t2.trdate,  CASE WHEN length(t2.createtime) = 5 THEN t2.createtime || ':00' ELSE t2.createtime END as usertime, t2.tramount, t2.glbank, 'P' as trtype, '' AS trstat, 0 AS "order", 
      0 AS seqno, t2.receiptno, 'Y' as legal , r2.regiondesc, l2.loanmeth, l2.payno, l2.loandate, 
      LEFT(u2.indkey_001, 4) as oper, trim(trailing FROM LEFT(u2.indkey_002, 25)) as user_name, t2.user as station, g2.bank_acct
            FROM company.mvtrans t2
            JOIN company.asbranch b2 ON b2.brnum = t2.brnum
            JOIN company.regions r2 ON r2.regioncode = b2.regioncode
            JOIN company.loans l2 ON l2.brnum = t2.brnum AND l2.client = t2.client AND l2.loan = t2.loan
            JOIN company.asstmast u2 ON t2.oper = LEFT(u2.indkey_001, 4)
            JOIN company.glbank g2 ON g2.brnum = t2.brnum AND g2.glbank = t2.glbank
                      
            WHERE (t2.tramount != 0) AND 
             (t2.trdate BETWEEN @startDate AND @endDate) AND (t2.glbank IN ('NAD', 'NUP')) AND (t2.mv_type = 'S') AND
             (CHAR_LENGTH(TRIM(COALESCE(t2.npaytranid, '')::text)) = 0)
             
ORDER BY brnum, trdate, usertime, loan, client</value>
  </data>
  <data name="SqlManReceiptsBank" xml:space="preserve">
    <value>SELECT t1.brnum, t1.loan, t1.client, t1.trdate, t1.usertime, t1.tramount, t1.glbank, t1.trtype , t1.trstat, COALESCE(t1."order", 0) AS "order", 
      COALESCE(t1.seqno, 0) AS seqno, COALESCE(t1.receiptno, 0) AS receiptno, 'N' AS legal, r1.regiondesc, l1.loanmeth, l1.payno, l1.loandate, 
      LEFT(u1.indkey_001, 4) as oper, trim(trailing FROM LEFT(u1.indkey_002, 25)) as user_name, t1.user as station, g1.bank_acct
            FROM company.trans t1
            JOIN company.asbranch b1 ON b1.brnum = t1.brnum
            JOIN company.regions r1 ON r1.regioncode = b1.regioncode
            JOIN company.loans l1 ON l1.brnum = t1.brnum AND l1.client = t1.client AND l1.loan = t1.loan
            JOIN company.asstmast u1 ON t1.oper = LEFT(u1.indkey_001, 4)
            JOIN company.glbank g1 ON g1.brnum = t1.brnum AND g1.glbank = t1.glbank
            WHERE (t1.tramount != 0) AND (t1.user != '63') AND
            (t1.trdate BETWEEN @startDate AND @endDate) AND (TRIM(t1.glbank) NOT IN ('NAD', 'NUP', 'ROL', 'C', 'CSH')) AND (t1.trtype IN ('P', 'G', 'F')) AND
            (CHAR_LENGTH(TRIM(COALESCE(t1.npaytranid, '')::text)) = 0)     
           
            UNION ALL 
           
SELECT t2.brnum, t2.loan, t2.client, t2.trdate,  CASE WHEN length(t2.createtime) = 5 THEN t2.createtime || ':00' ELSE t2.createtime END as usertime, t2.tramount, t2.glbank, 'P' as trtype, '' AS trstat, 0 AS "order", 
      0 AS seqno, t2.receiptno, 'Y' as legal , r2.regiondesc, l2.loanmeth, l2.payno, l2.loandate, 
      LEFT(u2.indkey_001, 4) as oper, trim(trailing FROM LEFT(u2.indkey_002, 25)) as user_name, t2.user as station, g2.bank_acct
            FROM company.mvtrans t2
            JOIN company.asbranch b2 ON b2.brnum = t2.brnum
            JOIN company.regions r2 ON r2.regioncode = b2.regioncode
            JOIN company.loans l2 ON l2.brnum = t2.brnum AND l2.client = t2.client AND l2.loan = t2.loan
            JOIN company.asstmast u2 ON t2.oper = LEFT(u2.indkey_001, 4)
            JOIN company.glbank g2 ON g2.brnum = t2.brnum AND g2.glbank = t2.glbank
                      
            WHERE (t2.tramount != 0) AND (t2.user != '63') AND
             (t2.trdate BETWEEN @startDate AND @endDate) AND  (TRIM(t2.glbank) NOT IN ('NAD', 'NUP', 'ROL', 'C', 'CSH')) AND (t2.mv_type = 'S') AND
             (CHAR_LENGTH(TRIM(COALESCE(t2.npaytranid, '')::text)) = 0)
             
ORDER BY brnum, trdate, usertime, loan, client</value>
  </data>
  <data name="SqlManReceiptsHub" xml:space="preserve">
    <value>SELECT t1.brnum, t1.loan, t1.client, t1.trdate, t1.usertime, t1.tramount, t1.glbank, t1.trtype , t1.trstat, COALESCE(t1."order", 0) AS "order", 
      COALESCE(t1.seqno, 0) AS seqno, COALESCE(t1.receiptno, 0) AS receiptno, 'N' AS legal, r1.regiondesc, l1.loanmeth, l1.payno, l1.loandate, 
      LEFT(u1.indkey_001, 4) as oper, trim(trailing FROM LEFT(u1.indkey_002, 25)) as user_name, t1.user as station, g1.bank_acct
            FROM company.trans t1
            JOIN company.asbranch b1 ON b1.brnum = t1.brnum
            JOIN company.regions r1 ON r1.regioncode = b1.regioncode
            JOIN company.loans l1 ON l1.brnum = t1.brnum AND l1.client = t1.client AND l1.loan = t1.loan
            JOIN company.asstmast u1 ON t1.oper = LEFT(u1.indkey_001, 4)
            JOIN company.glbank g1 ON g1.brnum = t1.brnum AND g1.glbank = t1.glbank
            WHERE (t1.tramount != 0)  AND (t1.user = '63') AND          
            (t1.trdate BETWEEN @startDate AND @endDate) AND (TRIM(t1.glbank) NOT IN ('NAD', 'NUP', 'ROL', 'C', 'CSH')) AND (t1.trtype IN ('P', 'G', 'F')) AND
            (CHAR_LENGTH(TRIM(COALESCE(t1.npaytranid, '')::text)) = 0)                            
                        
            UNION ALL 
           
SELECT t2.brnum, t2.loan, t2.client, t2.trdate,  CASE WHEN length(t2.createtime) = 5 THEN t2.createtime || ':00' ELSE t2.createtime END as usertime, t2.tramount, t2.glbank, 'P' as trtype, '' AS trstat, 0 AS "order", 
      0 AS seqno, t2.receiptno, 'Y' as legal , r2.regiondesc, l2.loanmeth, l2.payno, l2.loandate, 
      LEFT(u2.indkey_001, 4) as oper, trim(trailing FROM LEFT(u2.indkey_002, 25)) as user_name, t2.user as station, g2.bank_acct
            FROM company.mvtrans t2
            JOIN company.asbranch b2 ON b2.brnum = t2.brnum
            JOIN company.regions r2 ON r2.regioncode = b2.regioncode
            JOIN company.loans l2 ON l2.brnum = t2.brnum AND l2.client = t2.client AND l2.loan = t2.loan
            JOIN company.asstmast u2 ON t2.oper = LEFT(u2.indkey_001, 4)
            JOIN company.glbank g2 ON g2.brnum = t2.brnum AND g2.glbank = t2.glbank
                      
            WHERE (t2.tramount != 0) AND (t2.user = '63') AND
             (t2.trdate BETWEEN @startDate AND @endDate) AND(TRIM(t2.glbank) NOT IN ('NAD', 'NUP', 'ROL', 'C', 'CSH')) AND (t2.mv_type = 'S') AND
             (CHAR_LENGTH(TRIM(COALESCE(t2.npaytranid, '')::text)) = 0)
             
ORDER BY brnum, trdate, usertime, loan, client</value>
  </data>
</root>